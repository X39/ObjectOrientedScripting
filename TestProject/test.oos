using <std::Config>
using <std::Vehicle>
using <std::Man>
using <std::Context>

#include "test.def"
#define SOMEDEF //testmore
#define somethingWithArgs(TEST) //test TEST TEST6
#define mergeTest(TEST) //testing TEST##merge with ##

SOMEDEF
TEST6
somethingWithArgs(approved)
somethingWithArgs(", approved")
somethingWithArgs((, approved))
somethingWithArgs({a,p,r,o,v,e,d})
mergeTest(its something with )
mergeTest(itsMergedDude!)
namespace X39
{
    namespace testNamespace
    {
        class cFoo
		{
			public string cFooVariable1;
			public string cFooVariable2;
			public virtual void foobar(string _someRandomArg)
			{
				auto str = "class foo ";
				SQF diag_log(str.append(_someRandomArg));
			}
			public void test(string _test, string _test2)
			{
			
			}
			private void test2(string _test, string _test2)
			{
			
			}
		}
		class cBar extends cFoo
		{
			public string cBarVariable1;
			public string cBarVariable2;
			public virtual void foobar(string _someRandomArg)
			{
				auto str = "class bar ";
				SQF diag_log(str.append(_someRandomArg));
			}
		}
    }
	enum testEnum
	{
		String = 1,
		Scalar,
		Boolean,
		Auto1,
		Auto2
	}
	enum WarnedEnum
	{
		foo
	}
	static void EnumTestFunction(testEnum e)
	{
		switch(e)
		{
			case testEnum.String:
				SQF diag_log("String");
				break;
			case testEnum.Scalar:
				SQF diag_log("Scalar");
				break;
			case testEnum.Boolean:
				SQF diag_log("Boolean");
				break;
			case testEnum.Auto1:
				SQF diag_log("Auto1");
				break;
			case testEnum.Auto2:
				SQF diag_log("Auto2");
				break;
			default:
				EnumTestFunction(testEnum.Auto1);
				break;
		}
	}
    interface testInterface
    {
        void interfaceFnc(string, scalar, scalar);
    }
    class testObj implements testInterface
    {
        public testObj()
        {
            this.testVarPublic = "";
            testVarStatic = "";
            this.testFncPublic("arg1", "arg2");
            this.testFncPublic("arg1", "arg2");
            ::X39::testObj::testFncStatic("arg1", "arg2");
        }
        public string testVarPublic;
        static string testVarStatic;
        public void testFncPublic(string _arg1, string _arg2)
        {
            SQF diag_log(SQF str(_arg1));
        }
        static string testFncStatic(string _arg1, string _arg2)
        {
            SQF diag_log(SQF str(_arg2));
            return "";
        }
        public virtual void interfaceFnc(string s, scalar i, scalar j)
        {
            return;
        }
    }
	//static void testfnc(::X39::testInterface obj)
	//{
	//	return;
	//}
    static string testVarStatic2;
    static void castStaticTest(::X39::testNamespace::cBar testVar)
    {
        auto casted = <testNamespace::cFoo> testVar;
    }
    static bool instanceOfTest(object testVar)
    {
        return testVar is ::X39::testNamespace::cBar;
    }
    static bool returnTrue()
    {
        return true;
    }
	static void overloaded(string s)
	{
		SQF diag_log("string");
		return;
	}
	static void overloaded(scalar s)
	{
		SQF diag_log("scalar");
		return;
	}
	static void overLoaded(string s)
	{
		SQF diag_log("string different casing");
		return;
	}
    static void preInit()
    {
		overloaded("foo");
		overloaded(1);
		overLoaded("foobar");
		
		auto player = SQF player;
        SQF diag_log("preInit");
        auto _obj = new ::X39::testObj();
        _obj.testFncPublic("preInitArg1", "preInitArg2");
        ::X39::testObj::testFncStatic("preInitArg1", "preInitArg2");
        auto _foo = new ::X39::testNamespace::cFoo();
        _foo.foobar("normal foo");
		
        auto _bar = new ::X39::testNamespace::cBar();
        _foo.foobar("normal bar");

        auto _testing = 0;
        auto arrayObjectTest = new array<scalar>();
        arrayObjectTest.pushBack(0);
        arrayObjectTest.pushBack(1);
        arrayObjectTest.pushBack(2);
        SQF diag_log(arrayObjectTest[0]);
        
        auto configObj = new ::std::Config();
        configObj = configObj.extend("CfgVehicles").extend("FooBar");
        configObj = configObj.parent();
        auto hierarchy = configObj.hierarchy();
        SQF diag_log(hierarchy[0].name());
        SQF diag_log(configObj[0].name());
		
		auto arr = SQF allPlayers as array<::std::Man>;
		arr[0].getType();
        
        auto veh = new ::std::Vehicle("B_Heli_Light_01_F", 0, 0, 1000);
        if(!veh.isAlive())
        {
            return;
        }
        veh.setPosition(0, 0, 0);
        
        auto vehContext = veh.getContext();
        vehContext.setString("foo", "foobar", true);
        
        auto scalarArray = {1, 2, 3, 4, 5, 6};
        auto boolArray = {false, true, false};
        auto scalarValue = scalarArray[0];
        auto boolValue = boolArray[0];
		
		scalarValue++;
		scalarValue--;
		scalarValue += 3;
		scalarValue -= 3;
		scalarValue *= 3;
		scalarValue /= 3;
        
        
        for(auto _test = 0; _test < 10; _test = _test + 1)
        {
            SQF diag_log("test");
        }
        switch(SQF alive (SQF player))
        {
            case true:
                try
                {
                    throw "foobar";
                }
                catch(string test)
                {
                    SQF diag_log(test);
                }
                break;
            default:
                if(::X39::returnTrue())
                {
                    SQF systemChat("aprooved");
                }
                else
                {
                    SQF systemChat("nop");
                }
                break;
        }
        while(true)
        {
            break;
        }
		
    }
}