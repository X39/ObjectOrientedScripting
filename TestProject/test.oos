#include "test.def"
#define SOMEDEF //testmore
#define somethingWithArgs(TEST) //test TEST TEST6
#define mergeTest(TEST) //testing TEST##merge with ##

SOMEDEF
TEST6
somethingWithArgs(approved)
somethingWithArgs(", approved")
somethingWithArgs((, approved))
somethingWithArgs({a,p,r,o,v,e,d})
mergeTest(its something with )
mergeTest(itsMergedDude!)
namespace testNamespace
{
	#include "cFoo.oos"
	#include "cBar.oos"
}
interface testInterface
{
	void interfaceFnc(string, scalar, scalar);
}
class testObj
{
	public testObj()
	{
		this.testVarPublic = "";
		testVarStatic = "";
		this.testFncPublic("arg1", "arg2");
		::testObj::testFncStatic("arg1", "arg2");
	}
	public string testVarPublic;
	static string testVarStatic;
	public void testFncPublic(string _arg1, string _arg2)
	{
		SQF diag_log(SQF str(_arg1));
	}
	static void testFncStatic(string _arg1, string _arg2)
	{
		SQF diag_log(SQF str(_arg2));
		return "";
	}
}
static bool returnTrue()
{
	return true;
}
static void preInit()
{
	SQF diag_log("preInit");
    auto _obj = new ::testObj();
	_obj.testFncPublic("preInitArg1", "preInitArg2");
	::testObj::testFncStatic("preInitArg1", "preInitArg2");
	auto _foo = new testNamespace::cFoo();
	_foo.foobar("normal foo");

	auto _bar = new testNamespace::cBar();
	_foo.foobar("normal bar");

	auto _testing = 0;
    auto scalarArray = {1, 2, 3, 4, 5, 6};
    auto stringArray = {"test1", "test2", "test3"};
    auto boolArray = {false, true, false};
    auto scalarValue = scalarArray[0];
    auto stringValue = stringArray[0];
    auto boolValue = boolArray[0];
    string castedString = §string§ scalarValue;
    
	
	for(auto _test = 0; _test < 10; _test++)
	{
		SQF diag_log("test");
	}
	switch(SQF alive (SQF player))
	{
		case true:
			try
			{
				throw "foobar";
			}
			catch(object test)
			{
				SQF diag_log(test);
			}
			break;
		default:
			if(::returnTrue())
			{
				SQF systemChat("aprooved");
			}
			else
			{
				SQF systemChat("nop");
			}
			break;
	}
	while(true)
	{
		break;
	}
}