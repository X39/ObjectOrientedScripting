#include "test.def"
#define SOMEDEF //testmore
#define somethingWithArgs(TEST) //test TEST

SOMEDEF
TEST6
somethingWithArgs(approved)
somethingWithArgs(", approved")
somethingWithArgs((, approved))
somethingWithArgs({a,p,r,o,v,e,d})
namespace testNamespace
{
	#include "cFoo.oos"
	#include "cBar.oos"
}
class testObj
{
	constructor()
	{
		this.testVarPublic = "";
		if(!isset(::testObj::testVarStatic))
		{
			testVarStatic = "";
		}
		this.testFncPublic("arg1", "arg2");
		::testObj::testFncStatic("arg1", "arg2");
	}
	public auto testVarPublic;
	static auto testVarStatic;
	public function testFncPublic(_arg1, _arg2)
	{
		::SQF::diag_log(SQF::str(_arg1));
	}
	static function testFncStatic(_arg1, _arg2)
	{
		::SQF::diag_log(SQF::str(_arg2));
		return "";
	}
}
static function returnTrue()
{
	return true;
}
static function preInit()
{
	SQF::diag_log("preInit");
	startnative diag_log "test"; endnative;
	auto _obj = new ::testObj();
	_obj.testFncPublic("preInitArg1", "preInitArg2");
	::testObj::testFncStatic("preInitArg1", "preInitArg2");
	auto _foo = new testNamespace::cFoo();
	_foo.foobar("normal foo");

	auto _bar = new testNamespace::cBar();
	_foo.foobar("normal bar");

	auto _testing = 0;
	
	for(auto _test = 0; _test < 10; _test++)
	{
		SQF diag_log("test");
	}
	switch(native(alive player))
	{
		case true :
		{
			try
			{
				throw "foobar";
			}
			catch(test)
			{
				SQF diag_log(test);
			}
		}
		default :
		{
			if(returnTrue())
			{
				SQF systemChat("aprooved");
			}
			else
			{
				SQF systemChat("nop");
			}
		}
	}
	while(true)
	{
		break;
	}
}