(*
	Programm
	Namespace
	Class
	GlobalFunction
	GlobalVariable
	ClassFunction
	ClassVariable
	CodeInstruction
	FunctionCall
	VariableAssignment
	IfElse
	Expression
	ConditionalExpression
	For
	ForEach
	Switch
	Return
	Identifier
	AlphabetCharacter
	NumberCharacter
	Value
	Array
	String
	Scalar
	Bool
*)
(*
	For simplicity, characters in strings are left uppercase
	it should not matter at the end if they are upper or lower case!
*)
CodeInstruction = VariableAssignment, IfElse, For, ForEach, Switch, FunctionCall, Return;
Identifier = (AlphabetCharacter | '_'), {AlphabetCharacter | NumberCharacter};
AlphabetCharacter = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z';
NumberCharacter = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0';
String = (('"' | "'"), ?All Characters?, ('"' | "'"));
Scalar = (['-'], NumberCharacter, ['.', NumberCharacter]);
Bool = ('TRUE', 'FALSE');
Array = '{', {(Value | Array), [',']}, '}'
Value = (String | Scalar | Bool | (Array, '[', NumberCharacter, ']', {'[', NumberCharacter, ']'}));

Programm =	{Namespace, Class, Function, Identifier}, ( ?Function 'preInit' as preInit entry point? | ?Function 'postInit' as postInit entry point? );
Namespace =	'NAMESPACE', Identifier, '{', {Namespace, Class, Function, Identifier}, '}', {';'};
Class =	'CLASS', Identifier, '{', {Function, Identifier}, '}', {';'};
GlobalFunction = 'STATIC', 'FUNCTION', Identifier, '(', {Identifier}, ')', '{', {CodeInstruction},  '}', {';'};
GlobalVariable = 'STATIC', 'VAR', Identifier, [VariableAssignment], ';';
ClassFunction =	('STATIC' | 'PUBLIC' | 'PRIVATE' | 'PROTECTED'), 'FUNCTION', Identifier, '(', {Identifier}, ')', '{', {CodeInstruction}, '}', {';'};
ClassVariable = ('STATIC' | 'PUBLIC' | 'PRIVATE' | 'PROTECTED'), 'VAR', Identifier, [VariableAssignment], ';';
FunctionCall = Identifier, '(', {Identifier}, ')', ';';
VariableAssignment = Identifier, ('=' | '+=' | '-=' | '++' | '--' | '*=' | '/='), {(Identifier | Value | FunctionCall)}, ';';
IfElse = 'IF', '(', Expression, ')', (('{', {CodeInstruction}, '}') | CodeInstruction), ['ELSE', (('{', {CodeInstruction}, '}') | CodeInstruction)];
Expression = ['('], (ConditionalExpression | Expression | Value | Identifier | FunctionCall), [('>' | '<' | '>=' | '<=' | '=='), (ConditionalExpression | Expression | Value | Identifier | FunctionCall), [')'], {(('&&' | '||'), Expression)}];
ConditionalExpression = ['('], {(ConditionalExpression | Expression | Value | Identifier | FunctionCall)}, '?', (ConditionalExpression | Expression | Value | Identifier | FunctionCall), ':', (ConditionalExpression | Expression | Value | Identifier | FunctionCall), [')'];
For = 'FOR', '(', [CodeInstruction], ';', [ConditionalExpression | Expression | Value | Identifier | FunctionCall], ';', [CodeInstruction], ')', (('{', {CodeInstruction}, '}') | CodeInstruction), [';'];
ForEach = 'FOREACH', '(', 'VAR', Identifier, 'IN', (Identifier | Array), ')', (('{', {CodeInstruction}, '}') | CodeInstruction), [';'];
Switch = 'SWITCH', '(', (Identifier | Value) ')', '{', {('CASE', (Identifier | Value), ':'), CodeInstruction}, '}', [';'];
Return = 'RETURN', (ConditionalExpression | Expression | Value | Identifier | FunctionCall);