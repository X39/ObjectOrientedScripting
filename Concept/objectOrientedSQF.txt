ObjectOrientedSQF - Syntax Document V2.0
----------------------------------------

allowed characters for function/non-local variable names (REGEX validation: ^[a-zA-Z][_a-zA-Z0-9]+$:
	- A-Z			-	Everywhere
	- a-z			-	Everywhere
	- 0-9			-	Not at the very begining (0arr is not allowed, arr0 is)
	- _			-	Not at the very begining (_arr is not allowed, arr_ is)

allowed characters for local variable names (REGEX validation: ^_[_a-zA-Z0-9]+$:
	- A-Z			-	Everywhere
	- a-z			-	
	- 0-9			-	Everywhere at the very begining (0arr is not allowed, arr0 is)
	- _			-	Not at the very begining (_arr is not allowed, arr_ is)

reserved instructions:
	- static
	- public
	- private
	- auto
	- function
	- class
	- new
	- return
	- if
	- else
	- case
	- default
	- for
	- while
	- do
	- namespace
	- this
	- isset
	- toString
	- override
	- native
	- switch
	- break
	- try
	- catch
	- throw
	- instanceof

reserved characters:
	- []					-	Array markers
	- ()					-	ExecuteFirst brackets OR function parameter section
	- {}					-	Scope range
	- = += -= /= *= ++ --			- 	"Assign" operator (left takes value of right, in case of arrays left will get a reference only (use new for a copy))
	- +-*/%					-	Arithmetical operators
	- & | == && || !			-	logical operators (&& and || are lazy evaluation operators)
	- ?:					-	Short hand if (<condition> ? <returnWhenTrue> : <returnWhenFalse>)
	- #					-	Preprocessor directive (if not first char besides tabs and whitespace then it is considered as error)
	- //					-	Line comment
	- /* */					-	Block comment
	- /** */				-	Function/Variable/Class/Namespace comment (used for documentation, follows the JavaDocs syntax)

reserved namespaces:
	- SQF					-	Contains ALL native SQF functions (all SQF stuff is considered as function! Also, no validation is performed if it is correct)

preprocessor directives:
	- include "<relativeFilepath>"		-	Includes a files content to this spot
	- define <sequence> <replace>		-	Sets specific character sequence to be the following value
	- define <sequence>(<arg1>,  <arg2>, <argN>)  <replace>	-	Sets specific character sequence to be the following value
	- undefine <sequence>			-	Unsets given character sequence and thus preventing further replacement
	- ifdef <define>			-	following code will only be processed if given define exists
	- ifndef <define>			-	following code will only be processed if given define not exists
	- else					-	part of if

Entry Points:
	function preInit()
	function postInit()

Control Structures:
	Namespaces:
		namespace <namespacename>
		{
			[...]
		}
	Classes (implementing / extending parentclasses):
		class <classname> : <parentclass1>, <parentclass2>, <parentclassN>
		{
			constructor(arg1, arg2, argn)
			{
				[...]
				codeinstructions
				[...]
			}
			[...]
			classmembers (static, final, dynamic)
			[...]
		}
		
	Classes (without implementation / extension):
		class <classname>
		{
			constructor(arg1, arg2, argn)
			{
				[...]
				codeinstructions
				[...]
			}
			[...]
			classmembers (static, final, dynamic)
			[...]
		}
	
	static Class variable syntax:
		<static|public|private> auto <variableName>;
	
	CodeInstructions:	
		for (supports single instruction):
			for(<initiator>;<exitCondition>;<iterator>)
			{
				[...]
				codeinstructions
				[...]
			}
		
		while (supports single instruction):
			//check before code
			while(<exitCondition>)
			{
				[...]
				codeinstructions
				[...]
			}
		
		break:
			break;
		
		if else (supports single instruction):
			if(<condition>)
			{
				[...]
				codeinstructions
				[...]
			}
			else
			{
				[...]
				codeinstructions
				[...]
			}
		if (supports single instruction):
			if(<condition>)
			{
				[...]
				codeinstructions
				[...]
			}
		switch:
			switch(<expression>)
			{
				case <value>: { //supports single instruction
					[...]
					codeinstructions
					[...]
				}
				default : { //supports single instruction
					[...]
					codeinstructions
					[...]
				}
			}
		
		try catch:
			try
			{
				[...]
				codeinstructions
				[...]
			}
			catch(<identifier>)
			{
				[...]
				codeinstructions
				[...]
			}
		
		throw:
			throw <value/identifier>;
		
		native code:
			native <anything MultiLine is supported> endnative
		
		return:
			return <value|identifier>;
			
		isset:
			isset(<identifier>);
		
		assignment:
			//New local variable
			auto <identifier>;
			auto <identifier> = <value|identifier>;
			//reasigning a value
			<identifier> = <value|identifier>;
			<identifier> += <value|identifier>;
			<identifier> -= <value|identifier>;
			<identifier> *= <value|identifier>;
			<identifier> /= <value|identifier>;
			<identifier>++;
			<identifier>--;
		
		object creation:
			new <classname>
		
		expression:
			<expression|ident|value> && <expression|ident|value>	//Lazy And
			<expression|ident|value> || <expression|ident|value>	//Lazy Or
			<expression|ident|value> & <expression|ident|value>		//And
			<expression|ident|value> | <expression|ident|value>		//Or
			<expression|ident|value> == <expression|ident|value>	//Equals
			<expression|ident|value> === <expression|ident|value>	//Strikt equals (translate to IsEqualTo)
Notes:
	Class:
		- A Class ALWAYS has a constructor (not existing constructor = empty constructor)
		- A Constructor can be encapsulated as private thus making it "impossible" to create an object outside of given function
