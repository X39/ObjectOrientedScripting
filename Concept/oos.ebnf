using Compiler.OOS_LanguageObjects;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

COMPILER OOS
	CHARACTERS
		DIGIT = "0123456789".
		CHARACTER = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".
        ACHARACTER = "!|§$%&/*+-()=?`´#~ß}][{-_".
		OTHER = ANY - '/' - '*'. 
		STRINGCHARS = ANY - '\n' - '\r' - '"'.

	TOKENS
		T_SCALAR = [ '-' ] DIGIT { DIGIT } [ '.' DIGIT { DIGIT } ].
		T_STRING = '"' { STRINGCHARS | "\\\""} '"'.
		T_IDENT = ( CHARACTER | '_' ) { CHARACTER | '_' | DIGIT }.
		T_TERMINATOR = ';'.
		T_EXPOP = '&' | "&&" | '|' | "||" | "==" | "===" | '+' | '-' | '*' | ">=" | "<=".
        T_OTHEROP = ">>" | "<<".
		T_ASSIGNMENTCHAR = '='.
		T_EXTENDEDASSIGNMENTCHARS = "+=" | "-=" | "*=" | "/=".
		T_FASTASSIGNMENTCHARS = "++" | "--".
		T_ROUNDBRACKETOPEN = '('.
		T_ROUNDBRACKETCLOSE = ')'.
		T_SQUAREBRACKETOPEN = '['.
		T_SQUAREBRACKETCLOSE = ']'.
		T_CODEBRACKETOPEN = '{'.
		T_CODEBRACKETCLOSE = '}'.
		T_INSTANCEACCESS = '.'.
		T_NAMESPACEACCESS = "::".
		T_COMMA = ','.
		T_STATICCASTOPERATOR = '%'.
		T_DYNAMICCASTOPERATOR = '$'.
		T_TEMPLATEOPEN = '<'.
		T_TEMPLATECLOSE = '>'.
		T_SLASH = '/'.
		T_BACKSLASH = '\\'.
		
	COMMENTS FROM "/*" TO "*/" NESTED
	COMMENTS FROM "//" TO '\n'
	COMMENTS FROM '#' TO '\n'
	IGNORE '\t' + '\r' + '\n'
		
	PRODUCTIONS
		TERMINATOR =
			T_TERMINATOR
			{
				T_TERMINATOR
			}
		.
        TEMPLATE<out Template obj, pBaseLangObject parent> (. obj = new Template(parent, t.line, t.col); pBaseLangObject blo; VarType e; .) =
            T_TEMPLATEOPEN
            (
                IDENTACCESS<out blo, obj> (. obj.vtoList.Add(new VarTypeObject((Ident)blo)); .)
                |
                VARTYPE<out e> (. obj.vtoList.Add(new VarTypeObject(e)); .)
            )
            {
                T_COMMA
                (
                    IDENTACCESS<out blo, obj> (. obj.vtoList.Add(new VarTypeObject((Ident)blo)); .)
                    |
                    VARTYPE<out e> (. obj.vtoList.Add(new VarTypeObject(e)); .)
                )
            }
            T_TEMPLATECLOSE
        .
		IDENT<out pBaseLangObject outObj, pBaseLangObject parent> =
            T_IDENT (. outObj = new Ident(parent, t.val, t.line, t.col); .)
		.
		IDENTACCESS<out pBaseLangObject outObj, pBaseLangObject parent, bool allowBody = true> (. pBaseLangObject blo; pBaseLangObject ident; outObj = null; bool isGlobalIdent = false; .) =
            [
                T_NAMESPACEACCESS (. isGlobalIdent = true; .)
            ]
            [
                CAST<out outObj, parent>
            ]
            IDENT<out ident, (outObj == null ? parent : outObj)> (. try{ ((Ident)ident).IsGlobalIdentifier = isGlobalIdent; } catch (Exception ex) { SemErr(ex.Message); } if(outObj == null) outObj = ident; else outObj.addChild(ident); .)
			(. if(allowBody) { .)
            [
                BODY_FUNCTIONCALL<out blo, ident> (. ((Ident)ident).addChild(blo); .)
                |
                BODY_ARRAYACCESS<out blo, ident> (. ((Ident)ident).addChild(blo); .)
            ]
			(. } .)
            [
                (
                    T_INSTANCEACCESS (. ((Ident)ident).Access = Ident.AccessType.Instance; .)
                    |
                    T_NAMESPACEACCESS (. ((Ident)ident).Access = Ident.AccessType.Namespace; .)
                )
                IDENTACCESS<out blo, ident, allowBody> (. ((Ident)ident).addChild(blo); .)
            ]
        .
        CAST<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Cast(parent); outObj = obj; VarType vt; pBaseLangObject ident; .) =
            (
                T_STATICCASTOPERATOR (. obj.isStaticCast = true; .)
                (
                    VARTYPE<out vt> (. obj.varType = new VarTypeObject(vt); .)
                    |
                    IDENTACCESS<out ident, obj> (. obj.varType = new VarTypeObject((Ident)ident); .)
                )
                T_STATICCASTOPERATOR
            )
            |
            (
                T_DYNAMICCASTOPERATOR (. obj.isStaticCast = false; .)
                (
                    VARTYPE<out vt> (. obj.varType = new VarTypeObject(vt); .)
                    |
                    IDENTACCESS<out ident, obj> (. obj.varType = new VarTypeObject((Ident)ident); .)
                )
                T_DYNAMICCASTOPERATOR
            )
        .
		ENCAPSULATION<out Encapsulation e> (. e = Encapsulation.NA; .) =
			"public" (. e = Encapsulation.Public; .)
			|
			"private" (. e = Encapsulation.Private; .)
			|
			"protected" (. e = Encapsulation.Protected; .)
		.
		VARTYPE<out VarType e> (. e = VarType.Void; .) =
            (
                "scalar" (. e = VarType.Scalar; .)
                |
                "int" (. e = VarType.Scalar; .)
                |
                "double" (. e = VarType.Scalar; .)
                |
                "float" (. e = VarType.Scalar; .)
                |
                "bool" (. e = VarType.Bool; .)
                |
                "boolean" (. e = VarType.Bool; .)
                |
                "string" (. e = VarType.String; .)
                |
                "object" (. e = VarType.Object; .)
            )
            [
                T_SQUAREBRACKETOPEN
                T_SQUAREBRACKETCLOSE(. switch(e)
                                       {
                                            case VarType.Scalar:
                                                e = VarType.ScalarArray;
                                                break;
                                            case VarType.Bool:
                                                e = VarType.BoolArray;
                                                break;
                                            case VarType.String:
                                                e = VarType.StringArray;
                                                break;
                                            default:
                                                SemErr("Cannot Arrayify VarTypes which are not string/scalar/bool");
                                                break;
                                       } .)
            ]
		.
		BOOLEAN<out bool flag> (. flag = la.val == "true"; Get(); return; .) =
			"true" (. flag = true; .)
			|
			"false" (. flag = false; .)
		.
		VALUE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Value(parent); outObj = obj; outObj = obj; pBaseLangObject blo; bool flag; .) =
			T_STRING (. obj.varType = VarType.String; obj.value = t.val; .)
			|
			T_SCALAR (. obj.varType = VarType.Scalar; obj.value = t.val; .)
			|IF(la.val == "true" || la.val == "false")
			BOOLEAN<out flag> (. obj.varType = VarType.Bool; obj.value = (flag ? "true" : "false"); .)
			|
			BOOLEAN<out flag> (. obj.varType = VarType.Bool; obj.value = (flag ? "true" : "false"); .)
		.
		EXPRESSION_HELPER<out pBaseLangObject outObj, pBaseLangObject parent, bool flag> (. var obj = new Expression(parent, t.line, t.col); outObj = obj; pBaseLangObject blo; pBaseLangObject blo2; obj.negate = flag; .) =
			[
				'!' (. obj.negate = true; .)
			]
			(
				OP_NEWINSTANCE<out blo, obj> (. obj.lExpression = blo; .)
				|IF( la.val == "true" || la.val == "false" )
				VALUE<out blo, obj> (. obj.lExpression = blo; .)
				|
				VALUE<out blo, obj> (. obj.lExpression = blo; .)
				|
                (
                    IDENTACCESS<out blo, obj> (. obj.lExpression = blo; .)
                    [
                        OP_INSTANCEOF<out blo, obj, blo> (. obj.lExpression = blo; .)
                    ]
                )
				|
                OP_SQFCALL<out blo, obj> (. obj.lExpression = blo; .)
			)
			{
				(
                    T_EXPOP (. obj.expOperator = t.val; .)
                    |
                    T_SLASH (. obj.expOperator = t.val; .)
                    |
                    T_TEMPLATEOPEN (. obj.expOperator = t.val; .)
                    |
                    T_TEMPLATECLOSE (. obj.expOperator = t.val; .)
                )
				EXPRESSION<out blo, obj> (. obj.rExpression = blo; .)
			}
		.
		EXPRESSION<out pBaseLangObject outObj, pBaseLangObject parent> (. outObj = null; bool negate = false; .) =
            [
                '!' (. negate = true; .)
            ]
            (
                (
                    T_ROUNDBRACKETOPEN
                    EXPRESSION_HELPER<out outObj, parent, negate>
                    T_ROUNDBRACKETCLOSE
                )
                |
                EXPRESSION_HELPER<out outObj, parent, negate>
            )
		.
		OOS (. if(this.BaseObject == null) throw new Exception("BaseObject was never set"); var obj = this.BaseObject; pBaseLangObject blo; .) =
			[
				OP_USING
				{
					OP_USING
				}
			]
			{
				NAMESPACE<out blo, obj> (. obj.addChild(blo); .)
				|
				CLASS<out blo, obj> (. obj.addChild(blo); .)
				|
				NATIVECLASS<out blo, obj> (. obj.addChild(blo); .)
				|
				INTERFACE<out blo, obj> (. obj.addChild(blo); .)
				|
				(
					"static"
					(
						IF( peekCompare(-1, -1, _T_TERMINATOR) )
						NEWVARIABLE<out blo, obj, Encapsulation.Static> (. obj.addChild(blo); .)
						|
						FUNCTION<out blo, obj, Encapsulation.Static> (. obj.addChild(blo); .)
					)
				)
			}
		.
		OP_USING (. List<string> identList = new List<string>(); bool isLocal = false; .) =
			"using"
			(
				( (. isLocal = true; .)
					'"'
					T_IDENT (. identList.Add(t.val); .)
					{
						T_NAMESPACEACCESS
						T_IDENT (. identList.Add(t.val); .)
					}
					'"'
				)
				|
				(
					T_TEMPLATEOPEN
					T_IDENT (. identList.Add(t.val); .)
					{
						T_NAMESPACEACCESS
						T_IDENT (. identList.Add(t.val); .)
					}
					T_TEMPLATECLOSE
				)
			)
			(.
        if (errDist >= minErrDist)
        {
            string lookupPath = isLocal ? Wrapper.Compiler.ProjectFile.ProjectPath : Wrapper.Compiler.stdLibPath;
            string currentFile = lookupPath;
            bool flag = true;
            foreach (var it in identList)
            {
                string tmp = lookupPath + it;
                if (Directory.Exists(tmp))
                {
                    lookupPath += it + '\\';
                }
                else if (Directory.EnumerateFiles(lookupPath).Any(file =>
                {
                    int index = file.LastIndexOf('\\');
                    string tmpFile = file;
                    file = file.Substring(0, index);
                    if (file.StartsWith(it))
                    {
                        index = file.IndexOf('.');
                        if (index >= 0)
                        {
                            file = file.Substring(0, index);
                        }
                        if (file == it)
                        {
                            currentFile = tmpFile;
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }))
                {
                    if (identList.Last() != it)
                    {
                        flag = false;
                        SemErr("Invalid Operation, hit file before end: " + lookupPath);
                        break;
                    }
                }
                else
                {
                    flag = false;
                    SemErr("Invalid Operation, path could not be dereferenced: " + lookupPath);
                    break;
                }
            }
            if (flag)
            {
                if (!UsedFiles.Contains(currentFile))
                {
                    UsedFiles.Add(currentFile);
                    Scanner scanner = new Scanner(currentFile);
                    Base baseObject = new Base();
                    Parser p = new Parser(scanner);
                    p.BaseObject = this.BaseObject;
                    p.Parse();
                    if (p.errors.count > 0)
                    {
                        this.errors.count += p.errors.count;
                        Logger.Instance.log(Logger.LogLevel.ERROR, "In file '" + lookupPath + "'");
                    }
                }
            }
        }
			.)
		.
		NAMESPACE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Namespace(parent); outObj = obj; pBaseLangObject blo; .) =
			"namespace"
			IDENT<out blo, obj> (.
				obj.Name = (Ident)blo;
				
				var nsList = parent.getAllChildrenOf<Namespace>();
				foreach(var it in nsList)
				{
						if(it.Name.OriginalValue == ((Ident)blo).OriginalValue)
						{
							obj = it;
							outObj = obj;
							break;
						}
				}
			.)
			T_CODEBRACKETOPEN
			{
				NAMESPACE<out blo, obj> (. obj.addChild(blo); .)
				|
				CLASS<out blo, obj> (. obj.addChild(blo); .)
				|
				NATIVECLASS<out blo, obj> (. obj.addChild(blo); .)
				|
				INTERFACE<out blo, obj> (. obj.addChild(blo); .)
				|
				(
					"static"
					(
						IF( peekCompare(-1, -1, _T_TERMINATOR) )
						(
                            NEWVARIABLE<out blo, obj, Encapsulation.Static> (. obj.addChild(blo); .)
                            TERMINATOR
                        )
						|
						FUNCTION<out blo, obj, Encapsulation.Static> (. obj.addChild(blo); .)
					)
				)
			}
			T_CODEBRACKETCLOSE
		.
        NATIVECLASS<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Native(parent, t.line, t.col); outObj = obj; pBaseLangObject blo; Template te; bool flag = false; .) =
            "native"
            IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
            [
                TEMPLATE<out te, obj> (. obj.TemplateObject = te; flag = true; obj.VTO = new VarTypeObject(obj.Name, true, te); .)
            ]
			(. if(!flag) obj.VTO = new VarTypeObject(obj.Name, true); .)
			T_CODEBRACKETOPEN
            NATIVEASSIGN<out blo, obj> (. obj.addChild(blo); .)
			{
                NATIVEASSIGN<out blo, obj> (. obj.addChild(blo); .)
                |
				NATIVEFUNCTION<out blo, obj> (. obj.addChild(blo); .)
                |
                NATIVEOPERATOR<out blo, obj> (. obj.addChild(blo); .)
			}
			T_CODEBRACKETCLOSE
        .
        NATIVEASSIGN<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new NativeAssign(parent, t.line, t.col); outObj = obj; pBaseLangObject blo; .) =
            (. obj.Name = new Ident(obj, ((Native)parent).Name.OriginalValue, ((Native)parent).Name.Line, ((Native)parent).Name.Pos); .)
            "assign"
            [
                "simple" (. obj.IsSimple = true; .)
            ]
			T_ROUNDBRACKETOPEN
			[
				NEWVARIABLE<out blo, obj> (. obj.addChild(blo); .)
				{
					','
					NEWVARIABLE<out blo, obj> (. obj.addChild(blo); .)
				}
			]
			T_ROUNDBRACKETCLOSE
			{
				ANY (. obj.Code += t.val + (la.val == ";" ? "" : " "); .)
			}
			"endAssign" (. obj.Code = obj.Code.Trim(); .)
        .
        NATIVEFUNCTION<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new NativeFunction(parent, t.line, t.col); outObj = obj; pBaseLangObject blo; VarType v; .) =
            "fnc"
            [
                "simple" (. obj.IsSimple = true; .)
            ]
            (
				VARTYPE<out v> (. obj.VTO = new VarTypeObject(v); .)
				|
				"void" (. obj.VTO = new VarTypeObject(VarType.Void); .)
				|
                (   (. bool isStrict = false; .)                    
                    [
                        "strict" (. isStrict = true; .)
                    ]
                    IDENTACCESS<out blo, obj> (. obj.VTO = new VarTypeObject((Ident)blo, isStrict); .)
                    [ (. Template te; .)
                        TEMPLATE<out te, outObj> (. obj.VTO.TemplateObject = te; .)
                    ]
                )
            )
            IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
			T_ROUNDBRACKETOPEN
			[
				NEWVARIABLE<out blo, obj> (. obj.addChild(blo); .)
				{
					','
					NEWVARIABLE<out blo, obj> (. obj.addChild(blo); .)
				}
			]
			T_ROUNDBRACKETCLOSE
			{
				ANY (. obj.Code += t.val + (la.val == ";" ? "" : " "); .)
			}
			"endFnc" (. obj.Code = obj.Code.Trim(); .)
        .
        NATIVEOPERATOR<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new NativeOperator(parent, t.line, t.col); outObj = obj; pBaseLangObject blo; VarType v; .) =
            "operator"
            [
                "simple" (. obj.IsSimple = true; .)
            ]
            (
				VARTYPE<out v> (. obj.VTO = new VarTypeObject(v); .)
				|
				"void" (. obj.VTO = new VarTypeObject(VarType.Void); .)
				|
                (   (. bool isStrict = false; .)                    
                    [
                        "strict" (. isStrict = true; .)
                    ]
                    IDENTACCESS<out blo, obj, false> (. obj.VTO = new VarTypeObject((Ident)blo, isStrict); .)
                    [ (. Template te; .)
                        TEMPLATE<out te, outObj> (. obj.VTO.TemplateObject = te; .)
                    ]
                )
            )
            (
                (
                    T_SQUAREBRACKETOPEN
                    T_SQUAREBRACKETCLOSE (. obj.OperatorType = OverridableOperator.ArrayAccess; .)
                )
                |
                (
                    (
						T_EXPOP (. switch(t.val) {
							case "===":
								obj.OperatorType = OverridableOperator.ExplicitEquals;
								break;
							default:
								SemErr("The operator '" + t.val + "' is not supported for override");
								break;
						}.)
					)
                    |
					(
						T_SLASH (. SemErr("The operator '" + t.val + "' is not supported for override"); .)
					)
                    |
					(
						T_TEMPLATEOPEN
						T_TEMPLATEOPEN (. SemErr("The operator '" + t.val + "' is not supported for override"); .)
					)
                    |
					(
						T_TEMPLATECLOSE
						T_TEMPLATECLOSE (. SemErr("The operator '" + t.val + "' is not supported for override"); .)
					)
                )
            )
			T_ROUNDBRACKETOPEN
			[
				NEWVARIABLE<out blo, obj> (. obj.addChild(blo); .)
				{
					','
					NEWVARIABLE<out blo, obj> (. obj.addChild(blo); .)
				}
			]
			T_ROUNDBRACKETCLOSE
			{
				ANY (. obj.Code += t.val + (la.val == ";" ? "" : " "); .)
			}
			"endOperator" (. obj.Code = obj.Code.Trim(); .)
        .
		CLASS<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new oosClass(parent); outObj = obj; pBaseLangObject blo; Encapsulation e = Encapsulation.Private; bool hasConstructor = false; .) =
			"class"
			IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
			[
				"extends"
				IDENTACCESS<out blo, obj, false> (. obj.addParentClass((Ident)blo); .)
				{
					','
					IDENTACCESS<out blo, obj, false> (. obj.addParentClass((Ident)blo); .)
				}
			](. obj.markExtendsEnd(); .)
			[
				"implements"
				IDENTACCESS<out blo, obj, false> (. obj.addParentClass((Ident)blo); .)
				{
					','
					IDENTACCESS<out blo, obj, false> (. obj.addParentClass((Ident)blo); .)
				}
			]
            (. obj.markEnd(); .)
			T_CODEBRACKETOPEN
			{
                (. e = Encapsulation.Private; .)
				[
					ENCAPSULATION<out e>
					|
					"static" (. e = Encapsulation.Static; .)
				]
				(
					IF( peekCompare(-1, -1, _T_TERMINATOR) )
					(
						NEWVARIABLE<out blo, obj, e> (. obj.addChild(blo); .)
						TERMINATOR
					)
					|IF( peekCompare(_T_IDENT, _T_ROUNDBRACKETOPEN) && la.val.Equals(obj.Name.OriginalValue) )
					CONSTRUCTOR<out blo, obj, e> (. obj.addChild(blo); hasConstructor = true; .)
					|
					FUNCTION<out blo, obj, e> (. obj.addChild(blo); .)
				)
			}
			T_CODEBRACKETCLOSE (. if(!hasConstructor) {
                                      var constructor = new Function(obj);
									  constructor.encapsulation = Encapsulation.Public;
                                      try
                                      {
                                        constructor.Name = new Ident(constructor, obj.Name.OriginalValue, obj.Name.Line, obj.Name.Pos);
                                      }
                                      catch (Exception ex)
                                      {
                                        SemErr(ex.Message);
                                      }
                                      constructor.varType = new VarTypeObject(obj.Name); 
                                      constructor.markArgListEnd();
                                      obj.addChild(constructor);
                                  } .)
		.
		INTERFACE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new oosInterface(parent); outObj = obj; pBaseLangObject blo; .) =
			"interface"
			IDENT<out blo, obj> (. obj.Name = (Ident)blo; obj.VTO = new VarTypeObject((Ident)blo, true); .)
			T_CODEBRACKETOPEN
			{
				VFUNCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			T_CODEBRACKETCLOSE
		.
		FUNCTION<out pBaseLangObject outObj, pBaseLangObject parent, Encapsulation e> (. var obj = new Function(parent); obj.encapsulation = e; outObj = obj; pBaseLangObject blo; VarType v; .) =
            [
                "async" (. obj.IsAsync = true; .)
            ]
            [
                "override" (. obj.Override = true; .)
            ]
			(
				VARTYPE<out v> (. obj.varType = new VarTypeObject(v); .)
				|
				"void" (. obj.varType = new VarTypeObject(VarType.Void); .)
				|
                (   (. bool isStrict = false; .)                    
                    [
                        "strict" (. isStrict = true; .)
                    ]
                    IDENTACCESS<out blo, obj, false> (. obj.varType = new VarTypeObject((Ident)blo, isStrict); .)
                    [ (. Template te; .)
                        TEMPLATE<out te, outObj> (. obj.varType.TemplateObject = te; .)
                    ]
                )
			)
			IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
			T_ROUNDBRACKETOPEN
			[
				NEWVARIABLE<out blo, obj> (. obj.addChild(blo); .)
				{
					','
					NEWVARIABLE<out blo, obj> (. obj.addChild(blo); .)
				}
			]
			T_ROUNDBRACKETCLOSE (. obj.markArgListEnd(); .)
			T_CODEBRACKETOPEN
			{
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			T_CODEBRACKETCLOSE
			
		.
		CONSTRUCTOR<out pBaseLangObject outObj, pBaseLangObject parent, Encapsulation e> (. var obj = new Function(parent); obj.varType = new VarTypeObject(((oosClass)parent).Name, true); obj.encapsulation = e; outObj = obj; pBaseLangObject blo; .) =
			IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
			T_ROUNDBRACKETOPEN
			[
				NEWVARIABLE<out blo, obj> (. obj.addChild(blo); .)
				{
					','
					NEWVARIABLE<out blo, obj> (. obj.addChild(blo); .)
				}
			]
			T_ROUNDBRACKETCLOSE (. obj.markArgListEnd(); .)
			[
				':'
				IDENTACCESS<out blo, obj> (. obj.addChild(blo); .)
				{
					IDENTACCESS<out blo, obj> (. obj.addChild(blo); .)
				}
			]
			(. obj.markBaseCallEnd(); .)
			T_CODEBRACKETOPEN
			{
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			T_CODEBRACKETCLOSE
			
		.
		VFUNCTION<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new VirtualFunction(parent); outObj = obj; pBaseLangObject blo; VarType v; .) =
            [
                "async" (. obj.IsAsync = true; .)
            ]
			(
				VARTYPE<out v> (. obj.varType = new VarTypeObject(v); .)
				|
				"void" (. obj.varType = new VarTypeObject(VarType.Void); .)
				|
                (   (. bool isStrict = false; .)                    
                    [
                        "strict" (. isStrict = true; .)
                    ]
                    IDENTACCESS<out blo, obj, false> (. obj.varType = new VarTypeObject((Ident)blo, isStrict); .)
                    [ (. Template te; .)
                        TEMPLATE<out te, outObj> (. obj.varType.TemplateObject = te; .)
                    ]
                )
			)
			IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
			T_ROUNDBRACKETOPEN
			[
				(
					VARTYPE<out v> (. obj.argTypes.Add(new VarTypeObject(v)); .)
					|
					IDENTACCESS<out blo, obj, false> (.  obj.argTypes.Add(new VarTypeObject((Ident)blo)); .)
				)
				{
					','
					(
						VARTYPE<out v> (. obj.argTypes.Add(new VarTypeObject(v)); .)
						|
						IDENTACCESS<out blo, obj, false> (. obj.argTypes.Add(new VarTypeObject((Ident)blo)); .)
					)
				}
			]
			T_ROUNDBRACKETCLOSE
			TERMINATOR
		.
		NEWVARIABLE<out pBaseLangObject outObj, pBaseLangObject parent, Encapsulation e = Encapsulation.NA> (. var obj = new Variable(parent, la.col, la.line); obj.encapsulation = e; outObj = obj; pBaseLangObject blo; VarType v; .) =
			(
				VARTYPE<out v> (. obj.varType = new VarTypeObject(v); .)
				|
                ( (. bool isStrict = false; .)
                    [
                        "strict" (. isStrict = true; .)
                    ]
                    IDENTACCESS<out blo, obj> (. obj.varType = new VarTypeObject((Ident)blo, isStrict); .)
                    [ (. Template te; .)
                        TEMPLATE<out te, outObj> (. obj.varType.TemplateObject = te; .)
                    ]
                )
			)
			IDENT<out blo, outObj> (. obj.Name = (Ident)blo; .)
            [
                BODY_ASSIGNMENT<out blo, outObj> (. obj.addChild(blo); .)
            ]
		.
        VARIABLEASSIGNMENT<out pBaseLangObject outObj, pBaseLangObject ident, pBaseLangObject parent> (. var obj = new AssignContainer(parent); obj.Name = (Ident)ident; ident.Parent = obj; outObj = obj; pBaseLangObject blo; .) =
            BODY_ASSIGNMENT<out blo, outObj, true> (. obj.assign = (VariableAssignment)blo; .)
        .
		AUTOVARIABLE<out pBaseLangObject outObj, pBaseLangObject parent, Encapsulation e = Encapsulation.NA> (. var obj = new Variable(parent, la.col, la.line); obj.encapsulation = e; outObj = obj; pBaseLangObject blo; .) =
			"auto"(. obj.varType = new VarTypeObject(VarType.Auto); .)
			IDENT<out blo, outObj> (. obj.Name = (Ident)blo; .)
            BODY_ASSIGNMENT<out blo, outObj> (. obj.addChild(blo); .)
		.
		CODEINSTRUCTION_SC<out pBaseLangObject outObj, pBaseLangObject parent> (. outObj = null; pBaseLangObject blo; .) =
			OP_THROW<out outObj, parent>
			|
			OP_RETURN<out outObj, parent>
			|IF( (peekString(0, "scalar", "int", "double", "float", "bool", "string", "object") && peekCompare(-1, _T_IDENT)) || peekCompare(_T_IDENT, _T_IDENT) )
			(
				NEWVARIABLE<out outObj, parent>
				[
					BODY_ASSIGNMENT<out blo, outObj> (. outObj.addChild(blo); .)
				]
			)
			|
			AUTOVARIABLE<out outObj, parent>
			|
			(
				IDENTACCESS<out blo, parent>
				[
					VARIABLEASSIGNMENT<out outObj, blo, parent>
				]
				(. if(outObj == null) outObj = blo; .)
			)
			|
			OP_SQFCALL<out outObj, parent>
		.
		CODEINSTRUCTION_NSC<out pBaseLangObject outObj, pBaseLangObject parent> (. outObj = null; .) =
			OP_FOR<out outObj, parent>
			|
			OP_WHILE<out outObj, parent>
			|
			OP_IFELSE<out outObj, parent>
			|
			OP_SWITCH<out outObj, parent>
			|
			OP_TRYCATCH<out outObj, parent>
		.
		CODEINSTRUCTION<out pBaseLangObject outObj, pBaseLangObject parent> (. outObj = null; .) =
			(
				CODEINSTRUCTION_SC<out outObj, parent>
				TERMINATOR
			)
			|
			CODEINSTRUCTION_NSC<out outObj, parent>
		.
		BODY_ASSIGNMENT<out pBaseLangObject outObj, pBaseLangObject parent, bool allowAlt = false> (. var obj = new VariableAssignment(parent); outObj = obj; pBaseLangObject blo; .) =
            (
                T_ASSIGNMENTCHAR (. obj.Operation = AssignmentCharacters.SimpleAssign; .)
                (
                    EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
                    |
                    OP_NEWARRAY<out blo, obj> (. obj.addChild(blo); .)
                )
            )
            |IF( allowAlt )
            (
                (
                    T_FASTASSIGNMENTCHARS (. obj.Operation = t.val == "++" ? AssignmentCharacters.PlusOne : AssignmentCharacters.MinusOne; .)
                )
                |
                (
                    T_EXTENDEDASSIGNMENTCHARS (.
						switch(t.val)
						{
							case "+=":
								obj.Operation = AssignmentCharacters.AdditionAssign;
								break;
							case "-=":
								obj.Operation = AssignmentCharacters.SubstractionAssign;
								break;
							case "*=":
								obj.Operation = AssignmentCharacters.MultiplicationAssign;
								break;
							case "/=":
								obj.Operation = AssignmentCharacters.DivisionAssign;
								break;
							default:
								throw new Exception();
						}
					.)
                    (
                        EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
                        |
                        OP_NEWARRAY<out blo, obj> (. obj.addChild(blo); .)
                    )
                )
            )
		.
		BODY_ARRAYACCESS<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new ArrayAccess(parent); outObj = obj; pBaseLangObject blo; .) =
			T_SQUAREBRACKETOPEN
            VALUE<out blo, obj> (. obj.addChild(blo); .)
			T_SQUAREBRACKETCLOSE
		.
		BODY_FUNCTIONCALL<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new FunctionCall(parent); outObj = obj; pBaseLangObject blo; .) =
			T_ROUNDBRACKETOPEN
			[
				EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
				{
					','
					EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
				}
			]
			T_ROUNDBRACKETCLOSE
		.
		OP_FOR<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new For(parent); outObj = obj; pBaseLangObject blo; .) =
			"for"
			T_ROUNDBRACKETOPEN
			[
				CODEINSTRUCTION_SC<out blo, obj> (. obj.forArg1 = blo; .)
			]
			TERMINATOR
			[
				EXPRESSION<out blo, obj> (. obj.forArg2 = blo; .)
			]
			TERMINATOR
			[
				CODEINSTRUCTION_SC<out blo, obj> (. obj.forArg3 = blo; .)
			]
			T_ROUNDBRACKETCLOSE
			(
				(
					T_CODEBRACKETOPEN
					{
						CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
						|
						(
							OP_BREAK<out blo, obj> (. obj.addChild(blo); .)
							TERMINATOR
						)
					}
					T_CODEBRACKETCLOSE
				)
				|
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			)
		.
		OP_WHILE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new While(parent); outObj = obj; pBaseLangObject blo; .) =
			"while"
			T_ROUNDBRACKETOPEN
			EXPRESSION<out blo, obj> (. obj.expression = blo; .)
			T_ROUNDBRACKETCLOSE
			(
				(
					T_CODEBRACKETOPEN
					{
						CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
						|
						(
							OP_BREAK<out blo, obj> (. obj.addChild(blo); .)
							TERMINATOR
						)
					}
					T_CODEBRACKETCLOSE
				)
				|
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			)
		.
		OP_NEWINSTANCE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new NewInstance(parent); outObj = obj; pBaseLangObject blo; pBaseLangObject blo2; .) =
			"new"
			IDENTACCESS<out blo, obj, false> (. obj.Name = (Ident)blo; .)
            [ (. Template te; .)
                TEMPLATE<out te, ((Ident)blo).LastIdent> (. obj.TemplateObject = te; .)
            ]
			BODY_FUNCTIONCALL<out blo2, ((Ident)blo).LastIdent> (. ((Ident)blo).LastIdent.addChild(blo2); .)
		.
		OP_NEWARRAY<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new NewArray(parent); outObj = obj; pBaseLangObject blo; .) =
			T_CODEBRACKETOPEN
            [
                EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
                {
                    T_COMMA
                    EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
                }
            ]
            T_CODEBRACKETCLOSE
		.
		OP_IFELSE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new IfElse(parent); outObj = obj; pBaseLangObject blo; .) =
			"if"
			T_ROUNDBRACKETOPEN
			EXPRESSION<out blo, obj> (. obj.expression = blo; .)
			T_ROUNDBRACKETCLOSE
			(
				(
					T_CODEBRACKETOPEN
					{
						CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
					}
					T_CODEBRACKETCLOSE
				)
				|
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			)
			(. obj.markIfEnd(); .)
			[
				"else"
				(
					(
						T_CODEBRACKETOPEN
						{
							CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
						}
						T_CODEBRACKETCLOSE
					)
					|
					CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
				)
			]
		.
		OP_TRYCATCH<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new TryCatch(parent); outObj = obj; pBaseLangObject blo; .) =
			"try"
			T_CODEBRACKETOPEN
			{
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			T_CODEBRACKETCLOSE
			"catch"
			T_ROUNDBRACKETOPEN
			NEWVARIABLE<out blo, obj> (. obj.variable = blo; .)
			T_ROUNDBRACKETCLOSE (. obj.markEnd(); .)
			T_CODEBRACKETOPEN
			{
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			T_CODEBRACKETCLOSE
		.
		OP_BREAK<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Break(parent); outObj = obj; pBaseLangObject blo; .) =
			"break"
		.
		OP_INSTANCEOF<out pBaseLangObject outObj, pBaseLangObject parent, pBaseLangObject identAccess> (. var obj = new InstanceOf(parent); outObj = obj; pBaseLangObject blo; obj.LIdent = identAccess; identAccess.Parent = obj; .) =
            "is"
            IDENTACCESS<out blo, obj> (. obj.RIdent = (Ident)blo; .)
		.
		OP_THROW<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Throw(parent); outObj = obj; pBaseLangObject blo; .) =
			"throw"
			EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
		.
		OP_RETURN<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Return(parent, t.line, t.col); outObj = obj; pBaseLangObject blo; .) =
			"return"
			[
				EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
			]
		.
		OP_SWITCH<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Switch(parent); Case caseObj; outObj = obj; pBaseLangObject blo; .) =
			"switch"
			T_ROUNDBRACKETOPEN
			EXPRESSION<out blo, obj> (. obj.expression = blo; .)
			T_ROUNDBRACKETCLOSE
			T_CODEBRACKETOPEN
			{
				(
					"case" (. caseObj = new Case(obj, t.line, t.col); obj.addChild(caseObj); .)
					EXPRESSION<out blo, caseObj> (. caseObj.addChild(blo); .)
					':'
					{
						"case"
						EXPRESSION<out blo, caseObj> (. caseObj.addChild(blo); .)
						':'
					}
					(. caseObj.markEnd(); .)
					{
						CODEINSTRUCTION<out blo, caseObj> (. caseObj.addChild(blo); .)
					}
					(
						OP_BREAK<out blo, caseObj> (. caseObj.addChild(blo); .)
						TERMINATOR
						|
						OP_THROW<out blo, caseObj> (. caseObj.addChild(blo); .)
						TERMINATOR
						|
						OP_RETURN<out blo, caseObj> (. caseObj.addChild(blo); .)
						TERMINATOR
					)
				)
				|
				(
					(
						(
							"default" (. caseObj = new Case(obj, t.line, t.col); obj.addChild(caseObj); .)
							':'
						)
						|
						"default:" (. caseObj = new Case(obj, t.line, t.col); obj.addChild(caseObj); .)
					)
					{
						CODEINSTRUCTION<out blo, caseObj> (. caseObj.addChild(blo); .)
					}
					(
						OP_BREAK<out blo, caseObj> (. caseObj.addChild(blo); .)
						TERMINATOR
						|
						OP_THROW<out blo, caseObj> (. caseObj.addChild(blo); .)
						TERMINATOR
						|
						OP_RETURN<out blo, caseObj> (. caseObj.addChild(blo); .)
						TERMINATOR
					)
				)
			}
			T_CODEBRACKETCLOSE
		.
		OP_SQFCALL<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new SqfCall(parent); outObj = obj; pBaseLangObject blo; .) =
			"SQF"
			[
				T_ROUNDBRACKETOPEN
				EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
				{
                    T_COMMA
					EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
				}
				T_ROUNDBRACKETCLOSE
			]
			IDENT<out blo, outObj> (. try{ obj.Name = (Ident)blo;} catch (Exception ex) { SemErr(ex.Message); } .)
			[
				T_ROUNDBRACKETOPEN (. obj.markEnd(); .)
				EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
				{
                    T_COMMA
					EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
				}
				T_ROUNDBRACKETCLOSE
			]
		.
END OOS.