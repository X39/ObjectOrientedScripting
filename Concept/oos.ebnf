COMPILER OOS
	CHARACTERS
		DIGIT = "0123456789".
		CHARACTER = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".
		ACHARACTER = "!|§$%&/*+-()=?`´#~ß}][{-_". (* Missing ones: " \ ' *)

	TOKENS
		T_SCALAR = [ '-' ] DIGIT { DIGIT } [ '.' DIGIT { DIGIT } ].
		T_STRING = '"' { CHARACTER | ACHARACTER | DIGIT | "\"" | "\'" | "\\" | "\n" | "\r" | "\t" } '"'.
		T_IDENT = ( CHARACTER | '_' ) { CHARACTER | '_' | DIGIT }.
		T_TERMINATOR = ';'.
		
	COMMENTS FROM "/*" TO "*/" NESTED
	COMMENTS FROM "//" TO '\n'
	COMMENTS FROM '#' TO '\n'
	IGNORE '\t' + '\r' + '\n'
		
	PRODUCTIONS
		TERMINATOR
		=
			T_TERMINATOR
			{
				T_TERMINATOR
			}
		.
		GIDENT
		=
			"::"
			T_IDENT
			{
				"::"
				T_IDENT
			}
		.
		RIDENT
		=
			T_IDENT
			{
				"::"
				T_IDENT
			}
		.
		IDENT
		=
			RIDENT
			|
			GIDENT
		.
		INSTANCEACCESS
		=
			IDENT
			'.'
			T_IDENT
		.
		ENCAPSULATION
		=
			"public"
			"private"
			"protected"
		.
		VARTYPE
		=
			"scalar"
			"bool"
			"string"
			IDENT
		.
		STRING
		=
			T_STRING
		.
		EXP_BOOL
		=
			[
				'!'
			]
			(
				"true"
				|
				"false"
				|
				IDENT
				|
				EXP_SCALAR
				|
				EXP_STRING
			)
			{
				(
					"=="
					|
					"!="
					|
					"&&"
					|
					"||"
				)
				EXPRESSION
			}
		.
		EXP_SCALAR
		=
			(
				T_SCALAR
				|
				IDENT
			)
			[
				(
					(
						'>'
						[
							'='
						]
					)
					|
					(
						'<'
						[
							'='
						]
					)
					|
					"=="
				)
				EXP_SCALAR
			]
		.
		EXP_STRING
		=
			(
				STRING
				|
				IDENT
			)
			"=="
			(
				STRING
				|
				IDENT
			)
			
		.
		EXPRESSION
		=
			(
				'('
				EXP_BOOL
				')'
			)
			|
			EXP_BOOL
		.
		
		XSL
		=
			{
				NAMESPACE
				|
				CLASS
				|
				INTERFACE
			}
		.
		NAMESPACE
		=
			"namespace"
			T_IDENT
			'{'
			{
				NAMESPACE
				|
				CLASS
				|
				INTERFACE
				|
				GFUNCTION
				|
				GVARIABLE
			}
			'}'
		.
		CLASS
		=
			"class"
			T_IDENT
			[
				':'
				(
					RIDENT
					|
					GIDENT
				)
				{
					','					
					(
						RIDENT
						|
						GIDENT
					)
				}
			]
			'{'
			{
				CFUNCTION
				|
				CVARIABLE
			}
			'}'
		.
		INTERFACE
		=
			"interface"
			T_IDENT
			'{'
			{
				IFUNCTION
			}
			'}'
		.
		GFUNCTION
		=
			"static"
			FUNCTION
		.
		CFUNCTION
		=
			ENCAPSULATION
			FUNCTION
		.
		IFUNCTION
		=
			ENCAPSULATION
			VFUNCTION
		.
		GVARIABLE
		=
			"static"
			NEWVARIABLE
		.
		CVARIABLE
		=
			ENCAPSULATION
			NEWVARIABLE
		.
		FUNCTION
		=
			T_IDENT
			'('
				[
					VARTYPE
					T_IDENT
					{
						','
						VARTYPE
						T_IDENT
					}
				]
			')'
			'{'
				{
					CODEINSTRUCTION
				}
			'}'
			
		.
		VFUNCTION
		=
			"virtual"
			T_IDENT
			'('
				[
					VARTYPE
					{
						','
						VARTYPE
					}
				]
			')'
			TERMINATOR
		.
		NEWVARIABLE
		=
			VARTYPE
			T_IDENT
			[
				OP_ASSIGNMENT
			]
			TERMINATOR
		.
		CODEINSTRUCTIONSC
		=
		.
		CODEINSTRUCTIONNSC
		=
		.
		CODEINSTRUCTION
		=
			(
				CODEINSTRUCTIOSC
				TERMINATOR
			)
			|
			CODEINSTRUCTIONSC
		.
		OP_ASSIGNMENT
		=
			'='
			(* TODO: finish *)
		.
END OOS.