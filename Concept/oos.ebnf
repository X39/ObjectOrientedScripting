using Compiler.OOS_LanguageObjects;

COMPILER OOS
	CHARACTERS
		DIGIT = "0123456789".
		CHARACTER = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".
        ACHARACTER = "!|§$%&/*+-()=?`´#~ß}][{-_".

	TOKENS
		T_SCALAR = [ '-' ] DIGIT { DIGIT } [ '.' DIGIT { DIGIT } ].
		T_STRING = '"' { CHARACTER | ACHARACTER | DIGIT | "\"" | "\'" | "\\" | "\n" | "\r" | "\t" } '"'.
		T_IDENT = ["::"] ( CHARACTER | '_' ) { "::" | CHARACTER | '_' | DIGIT } [ '.' ( CHARACTER | '_' | DIGIT ) { CHARACTER | '_' | DIGIT } ].
		T_TERMINATOR = ';'.
		T_EXPOP = '&' | "&&" | '|' | "||" | "==" | "===" | '+' | '-' | '*' | '/' | '>' | ">=" | '<' | "<=".
		T_ASSIGNMENTCHAR = '='.
		T_ROUNDBRACKETOPEN = '('.
		T_ROUNDBRACKETCLOSE = ')'.
		
	COMMENTS FROM "/*" TO "*/" NESTED
	COMMENTS FROM "//" TO '\n'
	COMMENTS FROM '#' TO '\n'
	IGNORE '\t' + '\r' + '\n'
		
	PRODUCTIONS
		TERMINATOR
		=
			T_TERMINATOR
			{
				T_TERMINATOR
			}
		.
		IDENT<out pBaseLangObject outObj, pBaseLangObject parent>
		=
			T_IDENT (. var obj = new Ident(parent, t.val); outObj = obj;.)
		.
		ENCAPSULATION<out Encapsulation e> (. e = Encapsulation.NA; .)
		=
			"public" (. e = Encapsulation.Public; .)
			|
			"private" (. e = Encapsulation.Private; .)
			|
			"protected" (. e = Encapsulation.Protected; .)
		.
		VARTYPE<out VarType e> (. e = VarType.Void; .)
		=
			"scalar" (. e = VarType.Scalar; .)
			|
			"int" (. e = VarType.Scalar; .)
			|
			"double" (. e = VarType.Scalar; .)
			|
			"float" (. e = VarType.Scalar; .)
			|
			"bool" (. e = VarType.Bool; .)
			|
			"string" (. e = VarType.String; .)
		.
		STRING<out string o>
		=
			T_STRING (. o = t.val; .)
		.
		BOOLEAN<out bool flag> (. flag = false; .)
		=
			"true" (. flag = true; .)
			|
			"false" (. flag = false; .)
		.
		VALUE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Value(parent); outObj = obj; outObj = obj; pBaseLangObject blo; bool flag; string s; .)
		=
			STRING<out s> (. obj.varType = VarType.String; obj.value = s; .)
			|
			T_SCALAR (. obj.varType = VarType.Scalar; obj.value = t.val; .)
			|
			BOOLEAN<out flag> (. obj.varType = VarType.Bool; obj.value = (flag ? "true" : "false"); .)
		.
		EXPRESSION_HELPER<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Expression(parent); outObj = obj; pBaseLangObject blo; pBaseLangObject blo2; .)
		=
			[
				'!' (. obj.negate = true; .)
			]
			(
				VALUE<out blo, obj> (. obj.lExpression = blo; .)
				|
				OP_NEWINSTANCE<out blo, obj> (. obj.lExpression = blo; .)
				|
				(
					IDENT<out blo, obj> (. obj.lExpression = blo; .)
					BODY_FUNCTIONCALL<out blo2, blo> (. blo.addChild(blo2); .)
				)
				|
				OP_SQFCALL<out blo, obj> (. obj.lExpression = blo; .)
			)
			{
				T_EXPOP (. obj.expOperator = t.val; .)
				EXPRESSION<out blo, obj> (. obj.rExpression = blo; .)
			}
		.
		EXPRESSION<out pBaseLangObject outObj, pBaseLangObject parent> (. outObj = null; .)
		=
			(
				T_ROUNDBRACKETOPEN
				EXPRESSION_HELPER<out outObj, parent>
				T_ROUNDBRACKETCLOSE
			)
			|
			EXPRESSION_HELPER<out outObj, parent>
		.
		OOS (. var obj = new Base(); pBaseLangObject blo; .)
		=
			{
				NAMESPACE<out blo, obj> (. obj.addChild(blo); .)
				|
				CLASS<out blo, obj> (. obj.addChild(blo); .)
				|
				INTERFACE<out blo, obj> (. obj.addChild(blo); .)
			}
		.
		NAMESPACE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Namespace(parent); outObj = obj; pBaseLangObject blo; .)
		=
			"namespace"
			IDENT<out blo, obj> (. try{ obj.Name = (Ident)blo;} catch (Exception ex) { SemErr(ex.Message); } .)
			'{'
			{
				NAMESPACE<out blo, obj> (. obj.addChild(blo); .)
				|
				CLASS<out blo, obj> (. obj.addChild(blo); .)
				|
				INTERFACE<out blo, obj> (. obj.addChild(blo); .)
				|
				(
					"static"
					NEWVARIABLE<out blo, obj, Encapsulation.Static> (. obj.addChild(blo); .)
					|
					FUNCTION<out blo, obj, Encapsulation.Static> (. obj.addChild(blo); .)
				)
			}
			'}'
		.
		CLASS<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new oosClass(parent); outObj = obj; pBaseLangObject blo; Encapsulation e; .)
		=
			"class"
			IDENT<out blo, obj> (. try{ obj.Name = (Ident)blo;} catch (Exception ex) { SemErr(ex.Message); } .)
			[
				':'
				IDENT<out blo, obj> (. obj.addParentClass(blo); .)
				{
					','
					IDENT<out blo, obj> (. obj.addParentClass(blo); .)
				}
			]
			'{'
			{
				ENCAPSULATION<out e>
				(
					FUNCTION<out blo, obj, e> (. obj.addChild(blo); .)
					|
					NEWVARIABLE<out blo, obj, e> (. obj.addChild(blo); .)
				)
			}
			'}'
		.
		INTERFACE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new oosInterface(parent); outObj = obj; pBaseLangObject blo; .)
		=
			"interface"
			IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
			'{'
			{
				VFUNCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			'}'
		.
		FUNCTION<out pBaseLangObject outObj, pBaseLangObject parent, Encapsulation e> (. var obj = new Function(parent); obj.encapsulation = e; outObj = obj; pBaseLangObject blo; VarType v; .)
		=
			(
				VARTYPE<out v> (. obj.functionVarType = v; .)
				|
				"void" (. obj.functionVarType = VarType.Void; .)
			)
			IDENT<out blo, obj> (. try{ obj.Name = (Ident)blo;} catch (Exception ex) { SemErr(ex.Message); } .)
			T_ROUNDBRACKETOPEN
			[
				NEWVARIABLE<out blo, obj> (. obj.addChild(blo); .)
				{
					','
					NEWVARIABLE<out blo, obj> (. obj.addChild(blo); .)
				}
			]
			T_ROUNDBRACKETCLOSE (. obj.markArgListEnd(); .)
			'{'
			{
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			'}'
			
		.
		VFUNCTION<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new VirtualFunction(parent); outObj = obj; pBaseLangObject blo; VarType v; .)
		=
			"virtual"
			(
				VARTYPE<out v> (. obj.functionVarType = v; .)
				|
				"void" (. obj.functionVarType = VarType.Void; .)
			)
			IDENT<out blo, obj> (. try{ obj.Name = (Ident)blo;} catch (Exception ex) { SemErr(ex.Message); } .)
			T_ROUNDBRACKETOPEN
			[
				VARTYPE<out v> (. obj.argTypes.Add(v); .)
				{
					','
					VARTYPE<out v> (. obj.argTypes.Add(v); .)
				}
			]
			T_ROUNDBRACKETCLOSE
			TERMINATOR
		.
		NEWVARIABLE<out pBaseLangObject outObj, pBaseLangObject parent, Encapsulation e = Encapsulation.NA> (. var obj = new Variable(parent); obj.encapsulation = e; outObj = obj; pBaseLangObject blo; VarType v; .)
		=
			VARTYPE<out v> (. obj.varType = v; .)
			IDENT<out blo, obj> (. try{ obj.Name = (Ident)blo;} catch (Exception ex) { SemErr(ex.Message); } .)
		.
		AUTOVARIABLE<out pBaseLangObject outObj, pBaseLangObject parent, Encapsulation e = Encapsulation.NA> (. var obj = new Variable(parent); obj.encapsulation = e; outObj = obj; pBaseLangObject blo; .)
		=
			"auto"(. obj.varType = VarType.Auto; .)
			IDENT<out blo, obj> (. try{ obj.Name = (Ident)blo;} catch (Exception ex) { SemErr(ex.Message); } .)
		.
		CODEINSTRUCTION_SC<out pBaseLangObject outObj, pBaseLangObject parent> (. outObj = null; pBaseLangObject blo; .)
		=
			OP_THROW<out outObj, parent>
			|
			OP_RETURN<out outObj, parent>
			|IF( peekCompare(_T_IDENT, _T_ROUNDBRACKETOPEN) )
			(
				IDENT<out outObj, parent>
				BODY_FUNCTIONCALL<out blo, outObj> (. outObj.addChild(blo); .)
			)
			|IF( peekCompare(_T_IDENT, _T_ASSIGNMENTCHAR) )
			(
				IDENT<out outObj, parent>
				BODY_ASSIGNMENT<out blo, outObj> (. outObj.addChild(blo); .)
			)
			|
			(
				NEWVARIABLE<out outObj, parent>
				[
					BODY_ASSIGNMENT<out blo, outObj> (. outObj.addChild(blo); .)
				]
			)
			|
			(
				AUTOVARIABLE<out outObj, parent>
				BODY_ASSIGNMENT<out blo, outObj> (. outObj.addChild(blo); .)
			)
			|
			EXPRESSION<out outObj, parent>
		.
		CODEINSTRUCTION_NSC<out pBaseLangObject outObj, pBaseLangObject parent> (. outObj = null; .)
		=
			OP_FOR<out outObj, parent>
			|
			OP_WHILE<out outObj, parent>
			|
			OP_IFELSE<out outObj, parent>
			|
			OP_SWITCH<out outObj, parent>
			|
			OP_TRYCATCH<out outObj, parent>
		.
		CODEINSTRUCTION<out pBaseLangObject outObj, pBaseLangObject parent> (. outObj = null; .)
		=
			(
				CODEINSTRUCTION_SC<out outObj, parent>
				TERMINATOR
			)
			|
			CODEINSTRUCTION_NSC<out outObj, parent>
		.
		BODY_ASSIGNMENT<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new VariableAssignment(parent); outObj = obj; pBaseLangObject blo; .)
		=
			T_ASSIGNMENTCHAR (. obj.operation = t.val; .)
			EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
		.
		BODY_FUNCTIONCALL<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new VariableAssignment(parent); outObj = obj; pBaseLangObject blo; .)
		=
			T_ROUNDBRACKETOPEN
			[
				EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
				{
					','
					EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
				}
			]
			T_ROUNDBRACKETCLOSE
		.
		OP_FOR<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new For(parent); outObj = obj; pBaseLangObject blo; .)
		=
			"for"
			T_ROUNDBRACKETOPEN
			[
				CODEINSTRUCTION_SC<out blo, obj> (. obj.forArg1 = blo; .)
			]
			TERMINATOR
			[
				EXPRESSION<out blo, obj> (. obj.forArg2 = blo; .)
			]
			TERMINATOR
			[
				CODEINSTRUCTION_SC<out blo, obj> (. obj.forArg3 = blo; .)
			]
			T_ROUNDBRACKETCLOSE
			(
				(
					'{'
					{
						CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
						|
						(
							OP_BREAK<out blo, obj> (. obj.addChild(blo); .)
							TERMINATOR
						)
					}
					'}'
				)
				|
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			)
		.
		OP_WHILE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new While(parent); outObj = obj; pBaseLangObject blo; .)
		=
			"while"
			T_ROUNDBRACKETOPEN
			EXPRESSION<out blo, obj> (. obj.expression = blo; .)
			T_ROUNDBRACKETCLOSE
			(
				(
					'{'
					{
						CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
						|
						(
							OP_BREAK<out blo, obj> (. obj.addChild(blo); .)
							TERMINATOR
						)
					}
					'}'
				)
				|
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			)
		.
		OP_NEWINSTANCE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new NewInstance(parent); outObj = obj; pBaseLangObject blo; .)
		=
			"new"
			IDENT<out blo, obj> (. obj.addChild(blo); .)
		.
		OP_IFELSE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new IfElse(parent); outObj = obj; pBaseLangObject blo; .)
		=
			"if"
			T_ROUNDBRACKETOPEN
			EXPRESSION<out blo, obj> (. obj.expression = blo; .)
			T_ROUNDBRACKETCLOSE
			(
				(
					'{'
					{
						CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
					}
					'}'
				)
				|
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			)
			[
				"else" (. obj.markIfEnd(); .)
				(
					(
						'{'
						{
							CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
						}
						'}'
					)
					|
					CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
				)
			]
		.
		OP_TRYCATCH<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new TryCatch(parent); outObj = obj; pBaseLangObject blo; .)
		=
			"try"
			'{'
			{
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			'}'
			"catch"
			T_ROUNDBRACKETOPEN
			NEWVARIABLE<out blo, obj> (. obj.expression = blo; .)
			T_ROUNDBRACKETCLOSE (. obj.markIfEnd(); .)
			'{'
			{
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			'}'
		.
		OP_BREAK<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Break(parent); outObj = obj; pBaseLangObject blo; .)
		=
			"break"
		.
		OP_THROW<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Throw(parent); outObj = obj; pBaseLangObject blo; .)
		=
			"throw"
			EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
		.
		OP_RETURN<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Return(parent); outObj = obj; pBaseLangObject blo; .)
		=
			"return"
			[
				EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
			]
		.
		OP_SWITCH<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Switch(parent); Case caseObj; outObj = obj; pBaseLangObject blo; .)
		=
			"switch"
			T_ROUNDBRACKETOPEN
			EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
			T_ROUNDBRACKETCLOSE
			'{'
			{
				(
					"case" (. caseObj = new Case(obj); obj.addChild(caseObj); .)
					EXPRESSION<out blo, obj> (. caseObj.expression = blo; .)
					':'
					{
						"case"
						EXPRESSION<out blo, obj> (. caseObj.addChild(blo); .)
						':'
					}
					{
						CODEINSTRUCTION<out blo, obj> (. caseObj.addChild(blo); .)
					}
					(
						OP_BREAK<out blo, obj> (. caseObj.endOfCase = blo; .)
						|
						OP_THROW<out blo, obj> (. caseObj.endOfCase = blo; .)
						|
						OP_RETURN<out blo, obj> (. caseObj.endOfCase = blo; .)
					)
				)
				|
				(
					(
						(
							"default" (. caseObj = new Case(obj); obj.addChild(caseObj); caseObj.expression = new Ident(caseObj, "default"); .)
							':'
						)
						|
						"default:" (. caseObj = new Case(obj); obj.addChild(caseObj); caseObj.expression = new Ident(caseObj, "default"); .)
					)
					{
						CODEINSTRUCTION<out blo, obj> (. caseObj.addChild(blo); .)
					}
					(
						OP_BREAK<out blo, obj> (. caseObj.endOfCase = blo; .)
						|
						OP_THROW<out blo, obj> (. caseObj.endOfCase = blo; .)
						|
						OP_RETURN<out blo, obj> (. caseObj.endOfCase = blo; .)
					)
				)
			}
			'}'
		.
		OP_SQFCALL<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new SqfCall(parent); outObj = obj; pBaseLangObject blo; .)
		=
			"SQF"
			[
				T_ROUNDBRACKETOPEN
				{
					EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
				}
				T_ROUNDBRACKETCLOSE
			]
			IDENT<out blo, parent> (. try{ obj.Name = (Ident)blo;} catch (Exception ex) { SemErr(ex.Message); } .)
			[
				T_ROUNDBRACKETOPEN (. obj.markEnd(); .)
				{
					EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
				}
				T_ROUNDBRACKETCLOSE
			]
		.
END OOS.