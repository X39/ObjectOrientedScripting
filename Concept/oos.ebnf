COMPILER OOS
	CHARACTERS
		DIGIT = "0123456789".
		CHARACTER = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".
        ACHARACTER = "!|§$%&/*+-()=?`´#~ß}][{-_".

	TOKENS
		T_SCALAR = [ '-' ] DIGIT { DIGIT } [ '.' DIGIT { DIGIT } ].
		T_STRING = '"' { CHARACTER | ACHARACTER | DIGIT | "\"" | "\'" | "\\" | "\n" | "\r" | "\t" } '"'.
		T_IDENT = ["::"] ( CHARACTER | '_' ) { "::" | CHARACTER | '_' | DIGIT } [ '.' ( CHARACTER | '_' | DIGIT ) { CHARACTER | '_' | DIGIT } ].
		T_TERMINATOR = ';'.
		T_EXPOP = '&' | "&&" | '|' | "||" | "==" | "===" | '+' | '-' | '*' | '/' | '>' | ">=" | '<' | "<=".
		T_ASSIGNEMENTCHAR = '='.
		T_ROUNDBRACKETOPEN = '('.
		T_ROUNDBRACKETCLOSE = ')'.
		
	COMMENTS FROM "/*" TO "*/" NESTED
	COMMENTS FROM "//" TO '\n'
	COMMENTS FROM '#' TO '\n'
	IGNORE '\t' + '\r' + '\n'
		
	PRODUCTIONS
		TERMINATOR
		=
			T_TERMINATOR
			{
				T_TERMINATOR
			}
		.
		IDENT
		=
			T_IDENT
		.
		ENCAPSULATION
		=
			"public"
			|
			"private"
			|
			"protected"
		.
		VARTYPE
		=
			"scalar"
			|
			"bool"
			|
			"string"
		.
		STRING
		=
			T_STRING
		.
		BOOLEAN
		=
			"true"
			|
			"false"
		.
		VALUE
		=
			STRING
			|
			T_SCALAR
			|
			BOOLEAN
		.
		EXPRESSION_HELPER
		=
			[
				'!'
			]
			(
				VALUE
				|
				OP_NEWINSTANCE
				|
				(
					IDENT
					BODY_FUNCTIONCALL
				)
				|
				OP_SQFCALL
			)
			{
				T_EXPOP
				EXPRESSION
			}
		.
		EXPRESSION
		=
			(
				T_ROUNDBRACKETOPEN
				EXPRESSION_HELPER
				T_ROUNDBRACKETCLOSE
			)
			|
			EXPRESSION_HELPER
		.
		OOS
		=
			(
				NAMESPACE
				|
				CLASS
				|
				INTERFACE
			)
			{
				NAMESPACE
				|
				CLASS
				|
				INTERFACE
			}
		.
		NAMESPACE
		=
			"namespace"
			T_IDENT
			'{'
			{
				NAMESPACE
				|
				CLASS
				|
				INTERFACE
				|
				(
					"static"
					NEWVARIABLE
					|
					FUNCTION
				)
			}
			'}'
		.
		CLASS
		=
			"class"
			T_IDENT
			[
				':'
				IDENT
				{
					','		
					IDENT
				}
			]
			'{'
			{
				ENCAPSULATION
				FUNCTION
				|
				NEWVARIABLE
			}
			'}'
		.
		INTERFACE
		=
			"interface"
			T_IDENT
			'{'
			{
				ENCAPSULATION
				VFUNCTION
			}
			'}'
		.
		FUNCTION
		=
			(
				VARTYPE
				|
				"void"
			)
			IDENT
			T_ROUNDBRACKETOPEN
				[
					VARTYPE
					IDENT
					{
						','
						VARTYPE
						IDENT
					}
				]
			T_ROUNDBRACKETCLOSE
			'{'
				{
					CODEINSTRUCTION
				}
			'}'
			
		.
		VFUNCTION
		=
			"virtual"
			(
				VARTYPE
				|
				"void"
			)
			T_IDENT
			T_ROUNDBRACKETOPEN
				[
					VARTYPE
					{
						','
						VARTYPE
					}
				]
			T_ROUNDBRACKETCLOSE
			TERMINATOR
		.
		NEWVARIABLE
		=
			VARTYPE
			T_IDENT
		.
		AUTOVARIABLE
		=
			"auto"
			T_IDENT
		.
		CODEINSTRUCTION_SC
		=
			OP_THROW
			|
			OP_RETURN
			|IF( peekCompare(_T_IDENT, _T_ROUNDBRACKETOPEN) )
			(
				IDENT
				BODY_FUNCTIONCALL
			)
			|IF( peekCompare(_T_IDENT, _T_ASSIGNEMENTCHAR) )
			(
				IDENT
				BODY_ASSIGNMENT
			)
			|
			(
				NEWVARIABLE
				[
					BODY_ASSIGNMENT
				]
			)
			|
			(
				AUTOVARIABLE
				BODY_ASSIGNMENT
			)
			|
			EXPRESSION
		.
		CODEINSTRUCTION_NSC
		=
			OP_FOR
			|
			OP_WHILE
			|
			OP_IFELSE
			|
			OP_SWITCH
			|
			OP_TRYCATCH
		.
		CODEINSTRUCTION
		=
			(
				CODEINSTRUCTION_SC
				TERMINATOR
			)
			|
			CODEINSTRUCTION_NSC
		.
		BODY_ASSIGNMENT
		=
			T_ASSIGNEMENTCHAR
			EXPRESSION
		.
		OP_FOR
		=
			"for"
			T_ROUNDBRACKETOPEN
			[
				CODEINSTRUCTION_SC
			]
			TERMINATOR
			[
				EXPRESSION
			]
			TERMINATOR
			[
				CODEINSTRUCTION_SC
			]
			T_ROUNDBRACKETCLOSE
			(
				(
					'{'
					{
						CODEINSTRUCTION
						|
						(
							OP_BREAK
							TERMINATOR
						)
					}
					'}'
				)
				|
				CODEINSTRUCTION
			)
		.
		OP_WHILE
		=
			"while"
			T_ROUNDBRACKETOPEN
			EXPRESSION
			T_ROUNDBRACKETCLOSE
			(
				(
					'{'
					{
						CODEINSTRUCTION
						|
						(
							OP_BREAK
							TERMINATOR
						)
					}
					'}'
				)
				|
				CODEINSTRUCTION
			)
		.
		OP_NEWINSTANCE
		=
			"new"
			IDENT
		.
		OP_IFELSE
		=
			"if"
			T_ROUNDBRACKETOPEN
			EXPRESSION
			T_ROUNDBRACKETCLOSE
			(
				(
					'{'
					{
						CODEINSTRUCTION
					}
					'}'
				)
				|
				CODEINSTRUCTION
			)
			[
				"else"
				(
					(
						'{'
						{
							CODEINSTRUCTION
						}
						'}'
					)
					|
					CODEINSTRUCTION
				)
			]
		.
		OP_TRYCATCH
		=
			"try"
			'{'
			{
				CODEINSTRUCTION
			}
			'}'
			"catch"
			T_ROUNDBRACKETOPEN
			NEWVARIABLE
			T_ROUNDBRACKETCLOSE
			'{'
			{
				CODEINSTRUCTION
			}
			'}'
		.
		OP_BREAK
		=
			"break"
		.
		OP_THROW
		=
			"throw"
			EXPRESSION
		.
		OP_RETURN
		=
			"return"
			[
				EXPRESSION
			]
		.
		OP_SWITCH
		=
			"switch"
			T_ROUNDBRACKETOPEN
			EXPRESSION
			T_ROUNDBRACKETCLOSE
			'{'
			{
				(
					"case"
					EXPRESSION
					':'
					{
						"case"
						EXPRESSION
						':'
					}
					{
						CODEINSTRUCTION
					}
					(
						OP_BREAK
						|
						OP_THROW
						|
						OP_RETURN
					)
				)
				|
				(
					"default"
					':'
					{
						CODEINSTRUCTION
					}
					(
						OP_BREAK
						|
						OP_THROW
						|
						OP_RETURN
					)
				)
			}
			'}'
		.
		OP_SQFCALL
		=
			"SQF"
			[
				T_ROUNDBRACKETOPEN
				{
					EXPRESSION
				}
				T_ROUNDBRACKETCLOSE
			]
			T_IDENT
			[
				T_ROUNDBRACKETOPEN
				{
					EXPRESSION
				}
				T_ROUNDBRACKETCLOSE
			]
		.
		BODY_FUNCTIONCALL
		=
			T_ROUNDBRACKETOPEN
			[
				EXPRESSION
				{
					','
					EXPRESSION
				}
			]
			T_ROUNDBRACKETCLOSE
		.
END OOS.