using Compiler.OOS_LanguageObjects;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

COMPILER OOS
	CHARACTERS
		DIGIT = "0123456789".
		CHARACTER = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".
        ACHARACTER = "!|§$%&/*+-()=?`´#~ß}][{-_".
		OTHER = ANY - '/' - '*'. 
		STRINGCHARS = ANY - '\n' - '\r' - '"'.

	TOKENS
		T_SCALAR = [ '-' ] DIGIT { DIGIT } [ '.' DIGIT { DIGIT } ].
		T_STRING = '"' { STRINGCHARS | "\\\""} '"'.
		T_IDENT = ( CHARACTER | '_' ) { CHARACTER | '_' | DIGIT }.
		T_TERMINATOR = ';'.
		T_EXPOP1 = '+' | '-' | '*'.
		T_EXPOP2 = ">=" | "<=" | "==".
		T_EXPOP3 = "&&" | "||".
        T_OTHEROP = ">>" | "<<".
		T_ASSIGNMENTCHAR = '='.
		T_EXTENDEDASSIGNMENTCHARS = "+=" | "-=" | "*=" | "/=".
		T_FASTASSIGNMENTCHARS = "++" | "--".
		T_ROUNDBRACKETOPEN = '('.
		T_ROUNDBRACKETCLOSE = ')'.
		T_SQUAREBRACKETOPEN = '['.
		T_SQUAREBRACKETCLOSE = ']'.
		T_CODEBRACKETOPEN = '{'.
		T_CODEBRACKETCLOSE = '}'.
		T_INSTANCEACCESS = '.'.
		T_NAMESPACEACCESS = "::".
		T_COMMA = ','.
		T_TEMPLATEOPEN = '<'.
		T_TEMPLATECLOSE = '>'.
		T_SLASH = '/'.
		T_BACKSLASH = '\\'.
		
	COMMENTS FROM "/*" TO "*/" NESTED
	COMMENTS FROM "//" TO '\n'
	COMMENTS FROM '#' TO '\n'
	IGNORE '\t' + '\r' + '\n'
		
	PRODUCTIONS
		FNCARGLIST<pBaseLangObject obj> =
			(.
				pBaseLangObject blo;
				VarTypeObject vto;
			.)
			T_ROUNDBRACKETOPEN
			[
				VARTYPE<out vto, obj>
				NEWVARIABLE<out blo, obj, vto> (. obj.addChild(blo); .)
				{
					T_COMMA
					VARTYPE<out vto, obj>
					NEWVARIABLE<out blo, obj, vto> (. obj.addChild(blo); .)
				}
			]
			T_ROUNDBRACKETCLOSE
		.
		SPECIAL_NEWVARIABLEFUNCTION<out pBaseLangObject outObj, pBaseLangObject parent, Encapsulation e, bool fVFncOnly = false, bool isInline = false>
		(.
				outObj = null;
				pBaseLangObject blo;
				bool isAsync = false;
				bool isVirtual = false;
				VarTypeObject vto = null;
		.) =
			(
				VARTYPE<out vto, parent>
				(
					IF(peekCompare(_T_IDENT, _T_ROUNDBRACKETOPEN))
					FUNCTION<out blo, parent, e, vto, false, false, false, isInline>
					(.
						outObj = blo;
						if(!((Function)blo).IsVirtual && fVFncOnly)
						{
							SemErr("Non-Virtual function on VirtualOnly class");
						} 
					.)
					|
					NEWVARIABLE<out blo, parent, vto, e> (. outObj = blo; .)
					TERMINATOR
				)
			)
			|
			(
				"void" (. vto = new VarTypeObject(VarType.Void); .)
				FUNCTION<out blo, parent, e, vto, false, false, false, isInline>
				(.
					outObj = blo;
					if(!((Function)blo).IsVirtual && fVFncOnly)
					{
						SemErr("Non-Virtual function on VirtualOnly class");
					}
				.)
			)
			|
			(
				"async" (. isAsync = true; .)
				[
					(.
						if(isInline)
						{
							SemErr("virtual functions can't be inline");
						}
					.)
					"virtual" (. isVirtual = true; .)
				]
				(
					VARTYPE<out vto, parent>
					|
					"void" (. vto = new VarTypeObject(VarType.Void); .)
				)
				FUNCTION<out blo, parent, e, vto, isAsync, isVirtual, false, isInline>
				(.
					outObj = blo;
					if(!((Function)blo).IsVirtual && fVFncOnly)
					{
						SemErr("Non-Virtual function on VirtualOnly class");
					}
				.)
			)
			|
			(
				(.
					if(isInline)
					{
						SemErr("virtual functions can't be inline");
					}
				.)
				"virtual" (. isVirtual = true; .)
				(
					VARTYPE<out vto, parent>
					|
					"void" (. vto = new VarTypeObject(VarType.Void); .)
				)
				FUNCTION<out blo, parent, e, vto, isAsync, isVirtual>
				(.
					outObj = blo;
					if(!((Function)blo).IsVirtual && fVFncOnly)
					{
						SemErr("Non-Virtual function on VirtualOnly class");
					}
				.)
			)
			|
			(
				(.
					if(isInline)
					{
						SemErr("external functions can't be inline");
					}
				.)
				"external"
				[
					"async" (. isAsync = true; .)
				]
				(
					VARTYPE<out vto, parent>
					|
					"void" (. vto = new VarTypeObject(VarType.Void); .)
				)
				FUNCTION<out blo, parent, e, vto, isAsync, false, true> (. outObj = blo; .)
				TERMINATOR
			)
		.
		TERMINATOR =
			T_TERMINATOR
			{
				T_TERMINATOR
			}
		.
        TEMPLATE<out Template obj, pBaseLangObject parent> (. obj = new Template(parent, t.line, t.col, this.file); VarTypeObject vto; .) =
            T_TEMPLATEOPEN
			VARTYPE<out vto, obj> (. obj.vtoList.Add(vto); .)
            {
                T_COMMA
				VARTYPE<out vto, obj> (. obj.vtoList.Add(vto); .)
            }
            T_TEMPLATECLOSE
        .
		IDENT<out pBaseLangObject outObj, pBaseLangObject parent> =
            T_IDENT (. outObj = new Ident(parent, t.val, t.line, t.col, this.file); .)
		.
		IDENTACCESS<out pBaseLangObject outObj, pBaseLangObject parent, bool allowBody = true> (. pBaseLangObject blo; pBaseLangObject ident; outObj = null; bool isGlobalIdent = false; .) =
            [
                CAST<out outObj, parent>
            ]
            [
                T_NAMESPACEACCESS (. isGlobalIdent = true; .)
            ]
            IDENT<out ident, (outObj == null ? parent : outObj)> (. try{ ((Ident)ident).IsGlobalIdentifier = isGlobalIdent; } catch (Exception ex) { SemErr(ex.Message); } if(outObj == null) outObj = ident; else outObj.addChild(ident); .)
			(. if(allowBody) { .)
            [
                BODY_FUNCTIONCALL<out blo, ident> (. ((Ident)ident).addChild(blo); .)
                |
                BODY_ARRAYACCESS<out blo, ident> (. ((Ident)ident).addChild(blo); .)
            ]
			(. } .)
            [
                (
                    T_INSTANCEACCESS (. ((Ident)ident).Access = Ident.AccessType.Instance; .)
                    |
                    T_NAMESPACEACCESS (. ((Ident)ident).Access = Ident.AccessType.Namespace; .)
                )
                IDENTACCESS<out blo, ident, allowBody> (. ((Ident)ident).addChild(blo); .)
            ]
        .
        CAST<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Cast(parent); outObj = obj; VarTypeObject vto; .) =
            T_TEMPLATEOPEN
			VARTYPE<out vto, obj> (. obj.varType = vto; .)
            T_TEMPLATECLOSE
        .
		ENCAPSULATION<out Encapsulation e> (. e = Encapsulation.NA; .) =
			"public" (. e = Encapsulation.Public; .)
			|
			"private" (. e = Encapsulation.Private; .)
			|
			"protected" (. e = Encapsulation.Protected; .)
		.
		VARTYPE<out VarTypeObject e, pBaseLangObject parent, bool identFlag = false> (. e = null; .) =
			(
				(
					"scalar" (. e = new VarTypeObject(VarType.Scalar); .)
					|
					"int" (. e = new VarTypeObject(VarType.Scalar); .)
					|
					"double" (. e = new VarTypeObject(VarType.Scalar); .)
					|
					"float" (. e = new VarTypeObject(VarType.Scalar); .)
					|
					"bool" (. e = new VarTypeObject(VarType.Bool); .)
					|
					"boolean" (. e = new VarTypeObject(VarType.Bool); .)
					|
					"scalar[]" (. e = new VarTypeObject(VarType.ScalarArray); .)
					|
					"int[]" (. e = new VarTypeObject(VarType.ScalarArray); .)
					|
					"double[]" (. e = new VarTypeObject(VarType.ScalarArray); .)
					|
					"float[]" (. e = new VarTypeObject(VarType.ScalarArray); .)
					|
					"bool[]" (. e = new VarTypeObject(VarType.BoolArray); .)
					|
					"boolean[]" (. e = new VarTypeObject(VarType.BoolArray); .)
				)
			)
			|
            ( (. pBaseLangObject blo; .)
                IDENTACCESS<out blo, parent, identFlag> (. e = new VarTypeObject((Ident)blo); .)
                [ (. Template te; .)
                    TEMPLATE<out te, ((Ident)blo).LastIdent> (. e.TemplateObject = te; .)
                ]
            )
		.
		BOOLEAN<out bool flag> (. flag = la.val == "true"; Get(); return; /*fix for weirdo coco bug ...*/ .) =
			"true" (. flag = true; .)
			|
			"false" (. flag = false; .)
		.
		VALUE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Value(parent); outObj = obj; outObj = obj; bool flag; .) =
			T_STRING (. obj.varType.varType = VarType.Object; obj.value = t.val; obj.varType.ident = new Ident(obj, "string", t.line, t.col, this.file); obj.varType.ident.IsGlobalIdentifier = true; .)
			|
			T_SCALAR (. obj.varType.varType = VarType.Scalar; obj.value = t.val; .)
			|IF(la.val == "true" || la.val == "false")
			BOOLEAN<out flag> (. obj.varType.varType = VarType.Bool; obj.value = (flag ? "true" : "false"); .)
			|
			BOOLEAN<out flag> (. /*fix for weirdo coco bug ... */ .)
		.
		EXPRESSION<out pBaseLangObject outObj, pBaseLangObject parent, bool negate = false, bool hasBrackets = false> (. var obj = new Expression(parent, negate, hasBrackets, t.line, t.col, this.file); outObj = obj; pBaseLangObject blo; .) =
			EXPRESSION_HELPER<obj, out blo>
			(.
				int lastOpType = 3;
				var opList = new List<string>();
				var objList = new List<pBaseLangObject>();
				objList.Add(blo);
				List<Expression> previousExpressions = new List<Expression>();
				previousExpressions.Add(obj);
				if(!negate) {
			.)
			{
				(. string op = ""; int thisOpType = -1; .)
				(
                    T_EXPOP1 (. op = t.val; thisOpType = 1; .)
                    |
                    T_SLASH (. op = t.val; thisOpType = 1; .)
                    |
                    T_TEMPLATEOPEN (. op = t.val; thisOpType = 2; .)
                    |
                    T_TEMPLATECLOSE (. op = t.val; thisOpType = 2; .)
                    |
                    T_EXPOP2 (. op = t.val; thisOpType = 2; .)
                    |
                    T_EXPOP3 (. op = t.val; thisOpType = 3; .)
				)
				EXPRESSION_HELPER<obj, out blo>
				(.
					if(thisOpType != lastOpType)
					{
							if(thisOpType < lastOpType)
							{
								var expList = new Expression(previousExpressions.Last(), negate, hasBrackets, t.line, t.col, this.file);
								if (opList.Count > 0)
								{
									if (opList.Count > 1)
									{
										expList.expressionOperators.AddRange(opList.GetRange(0, opList.Count - 1));
									}
									previousExpressions.Last().expressionOperators.Add(opList[opList.Count - 1]);
								}
								previousExpressions.Last().expressionObjects.AddRange(objList.GetRange(0, objList.Count - 1));
								previousExpressions.Last().expressionObjects.Add(expList);
								previousExpressions.Add(expList);
								previousExpressions.Last().expressionObjects.Add(objList[objList.Count - 1]);
								opList.Clear();
								objList.Clear();
							}
							else
							{
								var expList = previousExpressions.Last();
								expList.expressionOperators.AddRange(opList);
								expList.expressionObjects.AddRange(objList);
								previousExpressions.RemoveAt(previousExpressions.Count - 1);
								opList.Clear();
								objList.Clear();
							}
					}
					opList.Add(op);
					objList.Add(blo);
					lastOpType = thisOpType;
				.)
			}
			(.
				}
				previousExpressions.Last().expressionOperators.AddRange(opList);
				previousExpressions.Last().expressionObjects.AddRange(objList);
			.)
		.
		EXPRESSION_HELPER<Expression obj, out pBaseLangObject blo> (. blo = null; .) =
			(
				'('
					EXPRESSION<out blo, obj, false>
				')'
			)
			|
			(
				'!'
				EXPRESSION<out blo, obj, true>
			)
			|
			OP_NEWINSTANCE<out blo, obj>
			|IF( la.val == "true" || la.val == "false" )
			VALUE<out blo, obj>
			|
			VALUE<out blo, obj>
			|
			(
				IDENTACCESS<out blo, obj>
				[
					OP_INSTANCEOF<out blo, obj, blo>
				]
			)
			|
			OP_SQFCALL<out blo, obj>
			|
			OP_NULL<out blo, obj>
			|
			OP_DEREF<out blo, obj>
			
		.
		OOS (. if(this.BaseObject == null) throw new Exception("BaseObject was never set"); var obj = this.BaseObject; pBaseLangObject blo; .) =
			[
				OP_USING
				{
					OP_USING
				}
			]
			{
				NAMESPACE<out blo, obj> (. obj.addChild(blo); .)
				|
				CLASS<out blo, obj> (. obj.addChild(blo); .)
				|
				NATIVECLASS<out blo, obj> (. obj.addChild(blo); .)
				|
				ENUM<out blo, obj> (. obj.addChild(blo); .)
				|
				INTERFACE<out blo, obj> (. obj.addChild(blo); .)
				|
				"static"
				(
					SPECIAL_NEWVARIABLEFUNCTION<out blo, obj, Encapsulation.Static> (. obj.addChild(blo); .)
					|
					NATIVEFUNCTION<out blo, obj> (. obj.addChild(blo); .)
				)
			}
		.
		OP_USING (. List<string> identList = new List<string>(); .) =
			"using"
			[
				T_NAMESPACEACCESS
			]
			T_IDENT (. identList.Add(t.val); .)
			{
				T_NAMESPACEACCESS
				T_IDENT (. identList.Add(t.val); .)
			}
			
			(.
			if (errDist >= minErrDist)
			{
				
				bool flag = false;
				string currentFile = "";
				foreach(string lookupPath in new string[] {Wrapper.Compiler.ProjectFile.SrcFolder, Wrapper.Compiler.stdLibPath})
				{
					if(flag)
						break;
					currentFile = lookupPath;
					foreach (var it in identList)
					{
						string tmp = currentFile + it;
						if (Directory.Exists(tmp))
						{
							currentFile += it + '\\';
						}
						else if (Directory.EnumerateFiles(currentFile).Any(file =>
						{
							int index = file.LastIndexOf('\\');
							string tmpFile = file;
							file = file.Substring(index + 1);
							if (file.StartsWith(it))
							{
								index = file.IndexOf('.');
								if (index >= 0)
								{
									file = file.Substring(0, index);
								}
								if (file == it)
								{
									currentFile = tmpFile;
									return true;
								}
								else
								{
									return false;
								}
							}
							else
							{
								return false;
							}
						}))
						{
							if (identList.Last() == it)
							{
								flag = true;
								break;
							}
						}
					}
				}
				if (flag)
				{
					if (!UsedFiles.Contains(currentFile))
					{
						UsedFiles.Add(currentFile);
						var ppFiles = new List<Compiler.PostProcessFile>();
						Wrapper.Compiler.Instance.preprocessFile(new List<Wrapper.Compiler.preprocessFile_IfDefModes>(), currentFile, currentFile, ppFiles);
						Scanner scanner = new Scanner(ppFiles.First().FileStream);
						Base baseObject = new Base();
						Parser p = new Parser(scanner, currentFile);
						p.BaseObject = this.BaseObject;
						p.Parse();
						if (p.errors.count > 0)
						{
							this.errors.count += p.errors.count;
							Logger.Instance.log(Logger.LogLevel.ERROR, "In file '" + currentFile + "'");
						}
					}
				}
				else
				{
					string errString = "";
					foreach(var it in identList)
						errString += "::" + it;
					SemErr("Invalid Operation, path could not be dereferenced: " + errString);
				}
			}
		.)
			[
				TERMINATOR
			]
		.
		ENUM<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new oosEnum(parent); outObj = obj; pBaseLangObject blo; oosEnum.EnumEntry entry; .) =
			"enum"
			IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
			T_CODEBRACKETOPEN
			(. entry = new oosEnum.EnumEntry(obj); obj.addChild(entry); .)
			IDENT<out blo, entry> (. entry.Name = (Ident)blo; .)
			[
				T_ASSIGNMENTCHAR
				VALUE<out blo, entry> (. entry.Value = (Value) blo; .)
			]
			{ (. entry = new oosEnum.EnumEntry(obj); obj.addChild(entry); .)
				T_COMMA
				IDENT<out blo, entry> (.  entry.Name = (Ident)blo; .)
				[
					T_ASSIGNMENTCHAR
					VALUE<out blo, entry> (. entry.Value = (Value) blo; .)
				]
			}
			
			T_CODEBRACKETCLOSE
		.
		NAMESPACE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Namespace(parent); outObj = obj; pBaseLangObject blo; .) =
			"namespace"
			IDENT<out blo, obj> (.
				obj.Name = (Ident)blo;
				
				var nsList = parent.getAllChildrenOf<Namespace>();
				foreach(var it in nsList)
				{
						if(it.Name.OriginalValue == ((Ident)blo).OriginalValue)
						{
							obj = it;
							outObj = obj;
							break;
						}
				}
			.)
			T_CODEBRACKETOPEN
			{
				NAMESPACE<out blo, obj> (. obj.addChild(blo); .)
				|
				CLASS<out blo, obj> (. obj.addChild(blo); .)
				|
				ENUM<out blo, obj> (. obj.addChild(blo); .)
				|
				NATIVECLASS<out blo, obj> (. obj.addChild(blo); .)
				|
				INTERFACE<out blo, obj> (. obj.addChild(blo); .)
				|
				"static"
				(
					SPECIAL_NEWVARIABLEFUNCTION<out blo, obj, Encapsulation.Static> (. obj.addChild(blo); .)
					|
					NATIVEFUNCTION<out blo, obj> (. obj.addChild(blo); .)
				)
			}
			T_CODEBRACKETCLOSE
		.
        NATIVECLASS<out pBaseLangObject outObj, pBaseLangObject parent> (.
			var obj = new Native(parent, t.line, t.col, this.file);
			outObj = obj;
			pBaseLangObject blo;
			Template te;
			bool flag = false;
			bool flag_disableConstructor = false;
			bool flag_noObjectExtends = false;
		.) =
            "native"
            IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
            [
                TEMPLATE<out te, obj> (. obj.TemplateObject = te; flag = true; obj.VTO = new VarTypeObject(obj.Name); .)
            ]
			[
				"flags"
				{
					"disableConstructor" (. flag_disableConstructor = true; .)
					|
					"noObjectExtends" (. flag_noObjectExtends = true; .)
				}
			]
			[
				"extends"
				IDENTACCESS<out blo, obj, false> (. obj.addParent((Ident)blo); .)
			]
			(. if(obj.parentIdents.Count == 0 && !flag_noObjectExtends) { var ident = new Ident(obj, "nobject", obj.Name.Line, obj.Name.Pos, obj.Name.File); ident.IsGlobalIdentifier = true; obj.addParent(ident); } .)
			(. if(!flag) obj.VTO = new VarTypeObject(obj.Name); .)
			(. flag = false; .)
			T_CODEBRACKETOPEN
			{
                NATIVEASSIGN<out blo, obj> (. obj.addChild(blo); flag = true; if(flag_disableConstructor)  { SemErr("Constructors are disabled in flags for this class"); } .)
                |
				NATIVEFUNCTION<out blo, obj> (. obj.addChild(blo); .)
                |
				ENUM<out blo, obj> (. obj.addChild(blo); .)
				|
                NATIVEOPERATOR<out blo, obj> (. obj.addChild(blo); .)
			}
			(.	if(!flag && !flag_disableConstructor)
				{
					var assign = new NativeAssign(obj, obj.Name.Line, obj.Name.Pos, obj.Name.File);
					assign.IsSimple = true;
					assign.Code = "throw \"Object is missing constructor\";";
					obj.addChild(assign);
				}
			.)
			T_CODEBRACKETCLOSE
        .
        NATIVEASSIGN<out pBaseLangObject outObj, pBaseLangObject parent> (.
			var obj = new NativeAssign(parent, t.line, t.col, this.file);
			outObj = obj;
			obj.Name = new Ident(obj, ((Native)parent).Name.OriginalValue, ((Native)parent).Name.Line, ((Native)parent).Name.Pos, this.file);
		.) =
			
            "assign"
            [
                "simple" (. obj.IsSimple = true; .)
            ]
			FNCARGLIST<obj>
			{
				ANY (. obj.Code += t.val + (la.val == ";" ? "" : " "); .)
			}
			"endAssign" (. obj.Code = obj.Code.Trim(); .)
        .
        NATIVEFUNCTION<out pBaseLangObject outObj, pBaseLangObject parent> (.
			var obj = new NativeFunction(parent, t.line, t.col, this.file);
			outObj = obj;
			pBaseLangObject blo;
			VarTypeObject vto;
		.) =
			
            "fnc"
            [
                "simple" (. obj.IsSimple = true; .)
            ]
            (
				VARTYPE<out vto, obj> (. obj.VTO = vto; .)
				|
				"void" (. obj.VTO = new VarTypeObject(VarType.Void); .)
            )
            IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
			FNCARGLIST<obj>
			{
				ANY (. obj.Code += t.val + (la.val == ";" ? "" : " "); .)
			}
			"endFnc" (. obj.Code = obj.Code.Trim(); .)
        .
        NATIVEOPERATOR<out pBaseLangObject outObj, pBaseLangObject parent> (.
			var obj = new NativeOperator(parent, t.line, t.col, this.file);
			outObj = obj;
			VarTypeObject vto;
		.) =
			
            "operator"
            [
                "simple" (. obj.IsSimple = true; .)
            ]
            (
				VARTYPE<out vto, obj> (. obj.VTO = vto; .)
				|
				"void" (. obj.VTO = new VarTypeObject(VarType.Void); .)
            )
            (
                (
                    T_SQUAREBRACKETOPEN
                    T_SQUAREBRACKETCLOSE (. obj.OperatorType = OverridableOperator.ArrayAccess; .)
                )
                |
                (
                    (
						T_EXPOP1 (. switch(t.val) {
							case "==":
								obj.OperatorType = OverridableOperator.ExplicitEquals;
								break;
							default:
								SemErr("The operator '" + t.val + "' is not supported for override");
								break;
						}.)
					)
                    |
                    (
						T_EXPOP2 (. switch(t.val) {
							case "==":
								obj.OperatorType = OverridableOperator.ExplicitEquals;
								break;
							default:
								SemErr("The operator '" + t.val + "' is not supported for override");
								break;
						}.)
					)
                    |
                    (
						T_EXPOP3 (. switch(t.val) {
							case "==":
								obj.OperatorType = OverridableOperator.ExplicitEquals;
								break;
							default:
								SemErr("The operator '" + t.val + "' is not supported for override");
								break;
						}.)
					)
                    |
					(
						T_SLASH (. SemErr("The operator '" + t.val + "' is not supported for override"); .)
					)
                    |
					(
						T_TEMPLATEOPEN
						T_TEMPLATEOPEN (. SemErr("The operator '" + t.val + "' is not supported for override"); .)
					)
                    |
					(
						T_TEMPLATECLOSE
						T_TEMPLATECLOSE (. SemErr("The operator '" + t.val + "' is not supported for override"); .)
					)
                )
            )
			FNCARGLIST<obj>
			{
				ANY (. obj.Code += t.val + (la.val == ";" ? "" : " "); .)
			}
			"endOperator" (. obj.Code = obj.Code.Trim(); .)
        .
		CLASS<out pBaseLangObject outObj, pBaseLangObject parent> (.
			var obj = new oosClass(parent);
			outObj = obj;
			pBaseLangObject blo;
			Encapsulation e = Encapsulation.Private;
			bool hasConstructor = false;
			bool flag_disableConstructor = false;
			bool flag_noObjectExtends = false;
			bool flag_virtualFunctionsOnly = false;
		.) =
			"class"
			IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
			[
				"flags"
				{
					"disableConstructor" (. flag_disableConstructor = true; .)
					|
					"noObjectExtends" (. flag_noObjectExtends = true; .)
					|
					"virtualFunctionsOnly" (. flag_virtualFunctionsOnly = true; .)
				}
			]
			[
				"extends"
				IDENTACCESS<out blo, obj, false> (. obj.addParentClass((Ident)blo); .)
			]
			(. 
				obj.markEnd();
				if(obj.ParentClassesIdents.Count == 0 && !flag_noObjectExtends)
				{
				    var ident = new Ident(obj, "object", -1, -1, "");
					ident.IsGlobalIdentifier = true;
				    obj.addParentClass(ident);
				}
				obj.markExtendsEnd();
			.)
			[
				"implements"
				IDENTACCESS<out blo, obj, false> (. obj.addParentClass((Ident)blo); .)
				{
					T_COMMA
					IDENTACCESS<out blo, obj, false> (. obj.addParentClass((Ident)blo); .)
				}
			]
			
            (. obj.markEnd(); .)
			T_CODEBRACKETOPEN
			{
                (. e = Encapsulation.Private; .)
				[
					ENCAPSULATION<out e>
					|
					"static" (. e = Encapsulation.Static; .)
				]
				(
					ENUM<out blo, obj> (. obj.addChild(blo); .)
					|
					(
						(. bool isInline = false; .)
						[
							"inline" (. isInline = true; .)
						]
						(
							IF( peekCompare(_T_IDENT, _T_ROUNDBRACKETOPEN) && la.val.Equals(obj.Name.OriginalValue) )
							CONSTRUCTOR<out blo, obj, e, isInline> (. obj.addChild(blo); hasConstructor = true; if(flag_disableConstructor)  { SemErr("Constructors are disabled in flags for this class"); } .)
							|
							SPECIAL_NEWVARIABLEFUNCTION<out blo, obj, e, flag_virtualFunctionsOnly, isInline> (. obj.addChild(blo); .)
						)
					)
				)
			}
			T_CODEBRACKETCLOSE (. if(!hasConstructor && !flag_disableConstructor) {
                                      var constructor = new Function(obj);
									  constructor.encapsulation = Encapsulation.Public;
                                      try
                                      {
                                        constructor.Name = new Ident(constructor, obj.Name.OriginalValue, obj.Name.Line, obj.Name.Pos, this.file);
                                      }
                                      catch (Exception ex)
                                      {
                                        SemErr(ex.Message);
                                      }
                                      constructor.varType = new VarTypeObject(obj.Name); 
                                      constructor.markArgListEnd();
                                      obj.addChild(constructor);
                                  } .)
		.
		INTERFACE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new oosInterface(parent); outObj = obj; pBaseLangObject blo; .) =
			"interface"
			IDENT<out blo, obj> (. obj.Name = (Ident)blo; obj.VTO = new VarTypeObject((Ident)blo); .)
			T_CODEBRACKETOPEN
			{
				VFUNCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			T_CODEBRACKETCLOSE
		.
		FUNCTION<out pBaseLangObject outObj, pBaseLangObject parent, Encapsulation e, VarTypeObject vto, bool isAsync = false, bool isVirtual = false, bool isExternal = false, bool isInline = false> (.
			var obj = new Function(parent); outObj = obj;
			obj.encapsulation = e;
			obj.IsAsync = isAsync;
			obj.IsVirtual = isVirtual;
			obj.varType = vto;
			obj.IsExternal = isExternal;
			obj.IsInline = isInline;
			pBaseLangObject blo;
			if(isExternal && isVirtual) SemErr("External function is marked as virtual");
			if(e == Encapsulation.Static && isVirtual) SemErr("Static function is marked as virtual");
		.) =
			
			IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
			FNCARGLIST<obj> (. obj.markArgListEnd(); .)
			(. if(!isExternal) { .)
			T_CODEBRACKETOPEN
			{
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			T_CODEBRACKETCLOSE
			(. } .)
			
		.
		CONSTRUCTOR<out pBaseLangObject outObj, pBaseLangObject parent, Encapsulation e, bool isInline> (.
			var obj = new Function(parent);outObj = obj;
			obj.varType = new VarTypeObject(((oosClass)parent).Name);
			obj.encapsulation = e;
			pBaseLangObject blo;
			obj.IsInline = isInline;
		.) =
			IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
			FNCARGLIST<obj> (. obj.markArgListEnd(); .)
			[
				':'
				IDENTACCESS<out blo, obj> (. obj.addChild(blo); .)
				{
					IDENTACCESS<out blo, obj> (. obj.addChild(blo); .)
				}
			]
			(. obj.markBaseCallEnd(); .)
			T_CODEBRACKETOPEN
			{
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			T_CODEBRACKETCLOSE
			
		.
		VFUNCTION<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new VirtualFunction(parent); outObj = obj; pBaseLangObject blo; VarTypeObject vto; .) =
            [
                "async" (. obj.IsAsync = true; .)
            ]
			(
				VARTYPE<out vto, obj> (. obj.varType = vto; .)
				|
				"void" (. obj.varType = new VarTypeObject(VarType.Void); .)
			)
			IDENT<out blo, obj> (. obj.Name = (Ident)blo; .)
			T_ROUNDBRACKETOPEN
			[
				VARTYPE<out vto, obj> (. obj.argTypes.Add(vto); .)
				{
					T_COMMA
					VARTYPE<out vto, obj> (. obj.argTypes.Add(vto); .)
				}
			]
			T_ROUNDBRACKETCLOSE
			TERMINATOR
		.
		NEWVARIABLE<out pBaseLangObject outObj, pBaseLangObject parent, VarTypeObject vto, Encapsulation e = Encapsulation.NA> (.
			var obj = new Variable(parent, la.line, la.col, this.file);
			obj.encapsulation = e;
			outObj = obj;
			pBaseLangObject blo;
			obj.varType = vto;
		.) =
			IDENT<out blo, outObj> (. obj.Name = (Ident)blo; .)
            [
                BODY_ASSIGNMENT<out blo, outObj> (. obj.addChild(blo); .)
            ]
		.
        VARIABLEASSIGNMENT<out pBaseLangObject outObj, pBaseLangObject ident, pBaseLangObject parent> (. var obj = new AssignContainer(parent); obj.Name = (Ident)ident; ident.Parent = obj; outObj = obj; pBaseLangObject blo; .) =
            BODY_ASSIGNMENT<out blo, outObj, true> (. obj.assign = (VariableAssignment)blo; .)
        .
		AUTOVARIABLE<out pBaseLangObject outObj, pBaseLangObject parent, Encapsulation e = Encapsulation.NA> (. var obj = new Variable(parent, la.line, la.col, this.file); obj.encapsulation = e; outObj = obj; pBaseLangObject blo; .) =
			"auto" (. obj.varType = new VarTypeObject(VarType.Auto); .)
			IDENT<out blo, outObj> (. obj.Name = (Ident)blo; .)
            BODY_ASSIGNMENT<out blo, outObj> (. obj.addChild(blo); .)
		.
		CODEINSTRUCTION_SC<out pBaseLangObject outObj, pBaseLangObject parent> (.
			outObj = null;
			VarTypeObject vto;
		.) =
			
			OP_THROW<out outObj, parent>
			|
			OP_RETURN<out outObj, parent>
			|
			(
				VARTYPE<out vto, parent, true>
				[
					IF(vto.IsObject)
					(
						VARIABLEASSIGNMENT<out outObj, vto.ident, parent>
						(. vto.ident.Parent = outObj; .)
						|
						NEWVARIABLE<out outObj, parent, vto>
					)
					|
					NEWVARIABLE<out outObj, parent, vto>
				]
				(.
					if(outObj == null && vto.IsObject)
					{
						outObj = vto.ident;
						vto.ident.Parent = parent;
						if(vto.ident.IsPureIdent)
						{
							Warning("Pure-Ident encountered during parsing, please add some use to it");
						}
					}
				.)
			)
			|
			AUTOVARIABLE<out outObj, parent>
			|
			OP_SQFCALL<out outObj, parent>
			|IF(parent.getFirstOf<Compiler.OOS_LanguageObjects.Interfaces.iBreakable>() != null)
			OP_BREAK<out outObj, parent>
		.
		CODEINSTRUCTION_NSC<out pBaseLangObject outObj, pBaseLangObject parent> (. outObj = null; .) =
			OP_FOR<out outObj, parent>
			|
			OP_WHILE<out outObj, parent>
			|
			OP_FOREACH<out outObj, parent>
			|
			OP_IFELSE<out outObj, parent>
			|
			OP_SWITCH<out outObj, parent>
			|
			OP_TRYCATCH<out outObj, parent>
		.
		CODEINSTRUCTION<out pBaseLangObject outObj, pBaseLangObject parent> (. outObj = null; .) =
			(
				CODEINSTRUCTION_SC<out outObj, parent>
				TERMINATOR
			)
			|
			CODEINSTRUCTION_NSC<out outObj, parent>
		.
		BODY_ASSIGNMENT<out pBaseLangObject outObj, pBaseLangObject parent, bool allowAlt = false> (. var obj = new VariableAssignment(parent); outObj = obj; pBaseLangObject blo; .) =
            (
                T_ASSIGNMENTCHAR (. obj.Operation = AssignmentCharacters.SimpleAssign; .)
                (
                    EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
                    |
                    OP_NEWARRAY<out blo, obj> (. obj.addChild(blo); .)
                )
            )
            |IF( allowAlt )
            (
                (
                    T_FASTASSIGNMENTCHARS (. obj.Operation = t.val == "++" ? AssignmentCharacters.PlusOne : AssignmentCharacters.MinusOne; .)
                )
                |
                (
                    T_EXTENDEDASSIGNMENTCHARS (.
						switch(t.val)
						{
							case "+=":
								obj.Operation = AssignmentCharacters.AdditionAssign;
								break;
							case "-=":
								obj.Operation = AssignmentCharacters.SubstractionAssign;
								break;
							case "*=":
								obj.Operation = AssignmentCharacters.MultiplicationAssign;
								break;
							case "/=":
								obj.Operation = AssignmentCharacters.DivisionAssign;
								break;
							default:
								throw new Exception();
						}
					.)
                    (
                        EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
                        |
                        OP_NEWARRAY<out blo, obj> (. obj.addChild(blo); .)
                    )
                )
            )
		.
		BODY_ARRAYACCESS<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new ArrayAccess(parent); outObj = obj; pBaseLangObject blo; .) =
			T_SQUAREBRACKETOPEN
            EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
			T_SQUAREBRACKETCLOSE
		.
		BODY_FUNCTIONCALL<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new FunctionCall(parent); outObj = obj; pBaseLangObject blo; .) =
			T_ROUNDBRACKETOPEN
			[
				EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
				{
					T_COMMA
					EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
				}
			]
			T_ROUNDBRACKETCLOSE
		.
		OP_FOR<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new For(parent); outObj = obj; pBaseLangObject blo; .) =
			"for"
			T_ROUNDBRACKETOPEN
			[
				CODEINSTRUCTION_SC<out blo, obj> (. obj.forArg1 = blo; .)
			]
			TERMINATOR
			[
				EXPRESSION<out blo, obj> (. obj.forArg2 = blo; .)
			]
			TERMINATOR
			[
				CODEINSTRUCTION_SC<out blo, obj> (. obj.forArg3 = blo; .)
			]
			T_ROUNDBRACKETCLOSE
			(
				(
					T_CODEBRACKETOPEN
					{
						CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
					}
					T_CODEBRACKETCLOSE
				)
				|
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			)
		.
		OP_NULL<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Null(parent, t.line, t.col, this.file); outObj = obj; .) =
			"null"
		.
		OP_DEREF<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Deref(parent, t.line, t.col, this.file); outObj = obj; pBaseLangObject blo; .) =
			"deref"
			IDENTACCESS<out blo, obj, false> (. obj.addChild((Ident)blo); .)
		.
		OP_FOREACH<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new ForEach(parent); outObj = obj; VarTypeObject vto = null; pBaseLangObject blo; .) =
			"foreach"
			T_ROUNDBRACKETOPEN
			(
				VARTYPE<out vto, obj>
				|
				"auto" (. vto = new VarTypeObject(VarType.Auto); .)
			)
			NEWVARIABLE<out blo, obj, vto> (. obj.Itterator = (Variable)blo; .)
			"in"
			IDENTACCESS<out blo, obj, false> (. obj.Variable = (Ident)blo; .)
			T_ROUNDBRACKETCLOSE
			(
				(
					T_CODEBRACKETOPEN
					{
						CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
					}
					T_CODEBRACKETCLOSE
				)
				|
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			)
		.
		OP_WHILE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new While(parent); outObj = obj; pBaseLangObject blo; .) =
			"while"
			T_ROUNDBRACKETOPEN
			EXPRESSION<out blo, obj> (. obj.expression = blo; .)
			T_ROUNDBRACKETCLOSE
			(
				(
					T_CODEBRACKETOPEN
					{
						CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
					}
					T_CODEBRACKETCLOSE
				)
				|
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			)
		.
		OP_NEWINSTANCE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new NewInstance(parent); outObj = obj; pBaseLangObject blo; pBaseLangObject blo2; .) =
			"new"
			IDENTACCESS<out blo, obj, false> (. obj.Name = (Ident)blo; .)
            [ (. Template te; .)
                TEMPLATE<out te, ((Ident)blo).LastIdent> (. obj.TemplateObject = te; .)
            ]
			BODY_FUNCTIONCALL<out blo2, ((Ident)blo).LastIdent> (. ((Ident)blo).LastIdent.addChild(blo2); .)
		.
		OP_NEWARRAY<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new NewArray(parent); outObj = obj; pBaseLangObject blo; .) =
			T_CODEBRACKETOPEN
            [
                EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
                {
                    T_COMMA
                    EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
                }
            ]
            T_CODEBRACKETCLOSE
		.
		OP_IFELSE<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new IfElse(parent); outObj = obj; pBaseLangObject blo; .) =
			"if"
			T_ROUNDBRACKETOPEN
			EXPRESSION<out blo, obj> (. obj.expression = blo; .)
			T_ROUNDBRACKETCLOSE
			(
				(
					T_CODEBRACKETOPEN
					{
						CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
					}
					T_CODEBRACKETCLOSE
				)
				|
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			)
			(. obj.markIfEnd(); .)
			[
				"else"
				(
					(
						T_CODEBRACKETOPEN
						{
							CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
						}
						T_CODEBRACKETCLOSE
					)
					|
					CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
				)
			]
		.
		OP_TRYCATCH<out pBaseLangObject outObj, pBaseLangObject parent> (.
			var obj = new TryCatch(parent);
			outObj = obj;
			pBaseLangObject blo;
			VarTypeObject vto;
		.) =
			
			"try"
			T_CODEBRACKETOPEN
			{
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			T_CODEBRACKETCLOSE(. obj.markEnd(); .)
			"catch"
			T_ROUNDBRACKETOPEN
			VARTYPE<out vto, obj>
			NEWVARIABLE<out blo, obj, vto> (. obj.variable = blo; .)
			T_ROUNDBRACKETCLOSE
			T_CODEBRACKETOPEN
			{
				CODEINSTRUCTION<out blo, obj> (. obj.addChild(blo); .)
			}
			T_CODEBRACKETCLOSE
		.
		OP_BREAK<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Break(parent); outObj = obj; .) =
			"break"
		.
		OP_INSTANCEOF<out pBaseLangObject outObj, pBaseLangObject parent, pBaseLangObject identAccess> (. var obj = new InstanceOf(parent); outObj = obj; pBaseLangObject blo; obj.LIdent = identAccess; identAccess.Parent = obj; .) =
            "is"
            IDENTACCESS<out blo, obj> (. obj.RIdent = (Ident)blo; .)
		.
		OP_THROW<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Throw(parent); outObj = obj; pBaseLangObject blo; .) =
			"throw"
			EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
		.
		OP_RETURN<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Return(parent, t.line, t.col, this.file); outObj = obj; pBaseLangObject blo; .) =
			"return"
			[
				EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
			]
		.
		OP_SWITCH<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new Switch(parent); Case caseObj; outObj = obj; pBaseLangObject blo; .) =
			"switch"
			T_ROUNDBRACKETOPEN
			EXPRESSION<out blo, obj> (. obj.expression = blo; .)
			T_ROUNDBRACKETCLOSE
			T_CODEBRACKETOPEN
			{
				(
					"case" (. caseObj = new Case(obj, t.line, t.col, this.file); obj.addChild(caseObj); .)
					EXPRESSION<out blo, caseObj> (. caseObj.addChild(blo); .)
					':'
					{
						"case"
						EXPRESSION<out blo, caseObj> (. caseObj.addChild(blo); .)
						':'
					}
					(. caseObj.markEnd(); .)
					{
						CODEINSTRUCTION<out blo, caseObj> (. caseObj.addChild(blo); .)
					}
					(
						OP_BREAK<out blo, caseObj> (. caseObj.addChild(blo); .)
						TERMINATOR
						|
						OP_THROW<out blo, caseObj> (. caseObj.addChild(blo); .)
						TERMINATOR
						|
						OP_RETURN<out blo, caseObj> (. caseObj.addChild(blo); .)
						TERMINATOR
					)
				)
				|
				(
					(
						(
							"default" (. caseObj = new Case(obj, t.line, t.col, this.file); obj.addChild(caseObj); .)
							':'
						)
						|
						"default:" (. caseObj = new Case(obj, t.line, t.col, this.file); obj.addChild(caseObj); .)
					)
					{
						CODEINSTRUCTION<out blo, caseObj> (. caseObj.addChild(blo); .)
					}
					(
						OP_BREAK<out blo, caseObj> (. caseObj.addChild(blo); .)
						TERMINATOR
						|
						OP_THROW<out blo, caseObj> (. caseObj.addChild(blo); .)
						TERMINATOR
						|
						OP_RETURN<out blo, caseObj> (. caseObj.addChild(blo); .)
						TERMINATOR
					)
				)
			}
			T_CODEBRACKETCLOSE
		.
		OP_SQFCALL<out pBaseLangObject outObj, pBaseLangObject parent> (. var obj = new SqfCall(parent); outObj = obj; pBaseLangObject blo; VarTypeObject vto; .) =
			"SQF"
			[
				T_ROUNDBRACKETOPEN
				(
					EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
					|
					OP_NEWARRAY<out blo, obj> (. obj.addChild(blo); .)
				)
				{
                    T_COMMA
					(
						EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
						|
						OP_NEWARRAY<out blo, obj> (. obj.addChild(blo); .)
					)
				}
				T_ROUNDBRACKETCLOSE
			]
			IDENT<out blo, outObj> (. try{ obj.Name = (Ident)blo;} catch (Exception ex) { SemErr(ex.Message); } .)
			[
				T_ROUNDBRACKETOPEN (. obj.markEnd(); .)
				(
					EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
					|
					OP_NEWARRAY<out blo, obj> (. obj.addChild(blo); .)
				)
				{
                    T_COMMA
					(
						EXPRESSION<out blo, obj> (. obj.addChild(blo); .)
						|
						OP_NEWARRAY<out blo, obj> (. obj.addChild(blo); .)
					)
				}
				T_ROUNDBRACKETCLOSE
			]
			[ (. obj.HasAs = true; .)
				"as"
				VARTYPE<out vto, obj> (. obj.ReferencedType = vto; .)
			]
		.
END OOS.