namespace yaoosl
{
    // Template stuff is planned to be somewhat similar to C++
    // down to the point where "uncompilable" stuff just gets dropped and compiles fine
    public class Optional<type t>
    {
        // Field accessors can be blown up into a method, lending this one from C#
        public t Value
        {
            get { if (this.HasValue) { return this._Value; } throw new Exception("Value not set."); }
            set (val) { this._Value = val; this.HasValue = true; }
        }
        private t _Value;
        
        // But no stuff required if `public` is enough and no methods needed
        public bool HasValue;
        
        public Optional() { this.HasValue = false; }
        public Optional(t val) { this.Value = val; }
        
        // Want some conversion? Here you go
        string conversion { return t; }
    }
}

// another conversion, this time the former "unbound" (static for those comming from other langs)
unbound public string conversion (Optional<bool> opt) { return opt.Value ? "T" : "F"; }



unbound public int32 main(uint32 argc, string[] argv,)
{
    // we can import stuff anywhere btw.
    using namespace yaoosl;
    using class something::fancy;
    // and use it afterwards, normally, like it would be local to this very method
    
    // Aliasing something is possible too btw. even tho, syntax might change ...
    // as this is rather ... switching the concerns ... not really sure what is the bigger
    // issue at hands here
    using class yaoosl::Optional = opt;
    
    
    // just output range of numbers
    // (not really sure tho if this should stick or not ... kinda neater then the classic for loop)
    for (auto num : 0..20) { yaoosl::Console::WriteLine(num); }
    // Same as above but with classic for loop
    for (int32 num = 0; num < 20; num++) { yaoosl::Console::WriteLine(num); }
    // while loops are also here. The tail of the while loop tho requires no semicolon
    int32 i = 0;
    while (++i < 10) { yaoosl::Console::WriteLine(i); }
    do { yaoosl::Console::WriteLine(i); } while (i > 0)
    // switch also here
    switch (i)
    {
        case -2: {
            yaoosl::Console::WriteLine("RANDOM");
            yaoosl::Console::WriteLine("STUFF");
        } break; // Note that multiple lines of code ALWAYS require a scope
        case -1: yaoosl::Console::WriteLine("FALL"); continue; // Fallthrough using continue
        case 0: yaoosl::Console::WriteLine("ZERO"); break;
        default: yaoosl::Console::WriteLine(i); break;
    }
    // try-catch-finally obviously too ...
    try { throw new Exception(); }
    catch { yaoosl::Console::WriteLine("Catched"); }
    finally { yaoosl::Console::WriteLine("Can also do finally tho"); }
    
    // not sure if i may have forgotten something at this point :3
    // some if maybe?
    if (argc == 1)
    {
        yaoosl::Console::WriteLine(argv[0]);
    }
    else
    {
        // iterating over ranges possible too
        for (auto str : argv)
        {
            yaoosl::Console::WriteLine(str);
        }
        
        auto opt1 = new Optional<bool>();
        yaoosl::Console::WriteLine(opt1.HasValue);
        opt1.Value = true;
        yaoosl::Console::WriteLine(opt1.HasValue);
        
        auto opt2 = new Optional<int>();
        yaoosl::Console::WriteLine(opt2.Value);
    }
}